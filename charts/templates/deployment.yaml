# Service deployment for Verana Indexer
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  selector:
    app: {{ .Values.name }}
  ports:
  - name: api
    port: {{ .Values.apiPort }}
    targetPort: {{ .Values.apiPort }}
    protocol: TCP
  - name: db
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: public-{{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/enable-cors: "{{ .Values.ingress.public.enableCors | default "true" }}"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.ingress.host . }}
      secretName: {{ tpl .Values.ingress.tlsSecret . }}
  rules:
    - host: {{ tpl .Values.ingress.host . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.name }}
                 port:
                   number: {{ .Values.apiPort }}
---
# PersistentVolumeClaim for the PostgreSQL database
# This PVC is used to store the PostgreSQL data
# If the database is enabled, this PVC will be created
{{- if .Values.database.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.name }}-pg-pv-main
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  storageClassName: csi-cinder-classic
  resources:
    requests:
      storage: 10Gi
{{- end }}
---
# PersistentVolumeClaim for the Redis database
# This PVC is used to store the Redis data
# If Redis is enabled, this PVC will be created
{{- if .Values.redis.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.name }}-redis-main
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  storageClassName: csi-cinder-classic
  resources:
    requests:
      storage: 1Gi
{{- end }}
---
# StatefulSet description for the Verana Indexer
# This StatefulSet manages the deployment of the Verana Indexer service
# It includes the agent container, PostgreSQL database (if enabled), and Redis (if enabled)
# The StatefulSet ensures that the agent service is deployed with a stable identity and persistent storage
# The PostgreSQL database is configured with environment variables for the user and password
# The Redis service is configured with its own container and persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
   name: {{ .Values.name }}
   namespace: {{ .Release.Namespace }}
spec:
   serviceName: {{ .Values.name }}
   replicas: {{ default 1 .Values.replicas }}
   selector:
      matchLabels:
         app: {{ .Values.name }}
   template:
      metadata:
         labels:
            app: {{ .Values.name }}
      spec:
         containers:
         -  name: {{ .Values.name }}-indexer-container
            image: veranalabs/verana-indexer:dev
            imagePullPolicy: Always
            env:
              - name: NODE_OPTIONS
                value: "--max-old-space-size=4096"
              - name: TRANSPORTER
                value: redis://{{ .Values.redis.host }}:6379
              - name: CACHER
                value: redis://{{ .Values.redis.host }}:6379
              - name: QUEUE_JOB_REDIS
                value: redis://{{ .Values.redis.host }}:6379
              - name: SERVICEDIR
                value: dist/src/services
              - name: SERVICES
                value: "**/*.service.js"
              - name: NODE_ENV
                value: production
              - name: NAMESPACE
                value: verana
              - name: POSTGRES_USER
                value: {{ .Values.database.user }}
              - name: POSTGRES_PASSWORD
                value: {{ .Values.database.pwd }}
              - name: POSTGRES_HOST
                value: {{ .Values.database.host }}
              - name: POSTGRES_DB
                value: {{ .Values.database.db }}
{{- with .Values.extraEnv }}
{{- range . }}
            - name: {{ .name }}
              value: {{ tpl .value $ | quote }}
{{- end }}
{{- end }}
            ports:
            -  containerPort: {{ .Values.apiPort }}
        {{- if .Values.database.enabled }}
         -  name: postgres
            image: postgres:14-alpine
            imagePullPolicy: Always
            env:
            - name: POSTGRES_PASSWORD
              value: {{ .Values.database.pwd }}
            - name: POSTGRES_USER
              value: {{ .Values.database.user }}
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            ports:
            -  containerPort: 5432
            resources:
{{- toYaml .Values.database.resources | nindent 14 }}
            volumeMounts:
            - name: {{ .Values.name }}-pg-pv-main
              mountPath: /var/lib/postgresql/data
        {{- end }}
        {{- if .Values.redis.enabled }}
         -  name: {{ .Values.name }}-redis-container
            image: redis:alpine
            imagePullPolicy: Always
            ports:
            -  containerPort: 6379
            resources:
{{- toYaml .Values.redis.resources | nindent 14 }}
            volumeMounts:
            - name: {{ .Values.name }}-redis-main
              mountPath: /home/data
        {{- end }}

         volumes:
        {{- if .Values.database.enabled }}
         - name: {{ .Values.name }}-pg-pv-main
           persistentVolumeClaim:
             claimName: {{ .Values.name }}-pg-pv-main
        {{- end }}
        {{- if .Values.redis.enabled }}
         - name: {{ .Values.name }}-redis-main
           persistentVolumeClaim:
             claimName: {{ .Values.name }}-redis-main
        {{- end }}
