// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";
import { Params } from "./params";
import { Permission, PermissionSession } from "./types";

export const protobufPackage = "verana.perm.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

export interface QueryListPermissionsRequest {
  modifiedAfter?:
    | Date
    | undefined;
  /** Default 64, min 1, max 1024 */
  responseMaxSize: number;
}

export interface QueryListPermissionsResponse {
  permissions: Permission[];
}

export interface QueryGetPermissionRequest {
  id: number;
}

export interface QueryGetPermissionResponse {
  permission?: Permission | undefined;
}

export interface QueryGetPermissionSessionRequest {
  /** UUID */
  id: string;
}

export interface QueryGetPermissionSessionResponse {
  session?: PermissionSession | undefined;
}

export interface QueryListPermissionSessionsRequest {
  modifiedAfter?: Date | undefined;
  responseMaxSize: number;
}

export interface QueryListPermissionSessionsResponse {
  sessions: PermissionSession[];
}

export interface QueryFindPermissionsWithDIDRequest {
  did: string;
  type: number;
  schemaId: number;
  country: string;
  when?: Date | undefined;
}

export interface QueryFindPermissionsWithDIDResponse {
  permissions: Permission[];
}

export interface QueryFindBeneficiariesRequest {
  issuerPermId: number;
  verifierPermId: number;
}

export interface QueryFindBeneficiariesResponse {
  permissions: Permission[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryListPermissionsRequest(): QueryListPermissionsRequest {
  return { modifiedAfter: undefined, responseMaxSize: 0 };
}

export const QueryListPermissionsRequest = {
  encode(message: QueryListPermissionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.modifiedAfter !== undefined) {
      Timestamp.encode(toTimestamp(message.modifiedAfter), writer.uint32(10).fork()).ldelim();
    }
    if (message.responseMaxSize !== 0) {
      writer.uint32(16).uint32(message.responseMaxSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListPermissionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modifiedAfter = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.responseMaxSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListPermissionsRequest {
    return {
      modifiedAfter: isSet(object.modifiedAfter) ? fromJsonTimestamp(object.modifiedAfter) : undefined,
      responseMaxSize: isSet(object.responseMaxSize) ? globalThis.Number(object.responseMaxSize) : 0,
    };
  },

  toJSON(message: QueryListPermissionsRequest): unknown {
    const obj: any = {};
    if (message.modifiedAfter !== undefined) {
      obj.modifiedAfter = message.modifiedAfter.toISOString();
    }
    if (message.responseMaxSize !== 0) {
      obj.responseMaxSize = Math.round(message.responseMaxSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListPermissionsRequest>, I>>(base?: I): QueryListPermissionsRequest {
    return QueryListPermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListPermissionsRequest>, I>>(object: I): QueryListPermissionsRequest {
    const message = createBaseQueryListPermissionsRequest();
    message.modifiedAfter = object.modifiedAfter ?? undefined;
    message.responseMaxSize = object.responseMaxSize ?? 0;
    return message;
  },
};

function createBaseQueryListPermissionsResponse(): QueryListPermissionsResponse {
  return { permissions: [] };
}

export const QueryListPermissionsResponse = {
  encode(message: QueryListPermissionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListPermissionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListPermissionsResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryListPermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListPermissionsResponse>, I>>(base?: I): QueryListPermissionsResponse {
    return QueryListPermissionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListPermissionsResponse>, I>>(object: I): QueryListPermissionsResponse {
    const message = createBaseQueryListPermissionsResponse();
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetPermissionRequest(): QueryGetPermissionRequest {
  return { id: 0 };
}

export const QueryGetPermissionRequest = {
  encode(message: QueryGetPermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetPermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetPermissionRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionRequest>, I>>(base?: I): QueryGetPermissionRequest {
    return QueryGetPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionRequest>, I>>(object: I): QueryGetPermissionRequest {
    const message = createBaseQueryGetPermissionRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetPermissionResponse(): QueryGetPermissionResponse {
  return { permission: undefined };
}

export const QueryGetPermissionResponse = {
  encode(message: QueryGetPermissionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetPermissionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionResponse {
    return { permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined };
  },

  toJSON(message: QueryGetPermissionResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionResponse>, I>>(base?: I): QueryGetPermissionResponse {
    return QueryGetPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionResponse>, I>>(object: I): QueryGetPermissionResponse {
    const message = createBaseQueryGetPermissionResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPermissionSessionRequest(): QueryGetPermissionSessionRequest {
  return { id: "" };
}

export const QueryGetPermissionSessionRequest = {
  encode(message: QueryGetPermissionSessionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetPermissionSessionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionSessionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetPermissionSessionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionSessionRequest>, I>>(
    base?: I,
  ): QueryGetPermissionSessionRequest {
    return QueryGetPermissionSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionSessionRequest>, I>>(
    object: I,
  ): QueryGetPermissionSessionRequest {
    const message = createBaseQueryGetPermissionSessionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetPermissionSessionResponse(): QueryGetPermissionSessionResponse {
  return { session: undefined };
}

export const QueryGetPermissionSessionResponse = {
  encode(message: QueryGetPermissionSessionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.session !== undefined) {
      PermissionSession.encode(message.session, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetPermissionSessionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.session = PermissionSession.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionSessionResponse {
    return { session: isSet(object.session) ? PermissionSession.fromJSON(object.session) : undefined };
  },

  toJSON(message: QueryGetPermissionSessionResponse): unknown {
    const obj: any = {};
    if (message.session !== undefined) {
      obj.session = PermissionSession.toJSON(message.session);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionSessionResponse>, I>>(
    base?: I,
  ): QueryGetPermissionSessionResponse {
    return QueryGetPermissionSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionSessionResponse>, I>>(
    object: I,
  ): QueryGetPermissionSessionResponse {
    const message = createBaseQueryGetPermissionSessionResponse();
    message.session = (object.session !== undefined && object.session !== null)
      ? PermissionSession.fromPartial(object.session)
      : undefined;
    return message;
  },
};

function createBaseQueryListPermissionSessionsRequest(): QueryListPermissionSessionsRequest {
  return { modifiedAfter: undefined, responseMaxSize: 0 };
}

export const QueryListPermissionSessionsRequest = {
  encode(message: QueryListPermissionSessionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.modifiedAfter !== undefined) {
      Timestamp.encode(toTimestamp(message.modifiedAfter), writer.uint32(10).fork()).ldelim();
    }
    if (message.responseMaxSize !== 0) {
      writer.uint32(16).uint32(message.responseMaxSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListPermissionSessionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListPermissionSessionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modifiedAfter = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.responseMaxSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListPermissionSessionsRequest {
    return {
      modifiedAfter: isSet(object.modifiedAfter) ? fromJsonTimestamp(object.modifiedAfter) : undefined,
      responseMaxSize: isSet(object.responseMaxSize) ? globalThis.Number(object.responseMaxSize) : 0,
    };
  },

  toJSON(message: QueryListPermissionSessionsRequest): unknown {
    const obj: any = {};
    if (message.modifiedAfter !== undefined) {
      obj.modifiedAfter = message.modifiedAfter.toISOString();
    }
    if (message.responseMaxSize !== 0) {
      obj.responseMaxSize = Math.round(message.responseMaxSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListPermissionSessionsRequest>, I>>(
    base?: I,
  ): QueryListPermissionSessionsRequest {
    return QueryListPermissionSessionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListPermissionSessionsRequest>, I>>(
    object: I,
  ): QueryListPermissionSessionsRequest {
    const message = createBaseQueryListPermissionSessionsRequest();
    message.modifiedAfter = object.modifiedAfter ?? undefined;
    message.responseMaxSize = object.responseMaxSize ?? 0;
    return message;
  },
};

function createBaseQueryListPermissionSessionsResponse(): QueryListPermissionSessionsResponse {
  return { sessions: [] };
}

export const QueryListPermissionSessionsResponse = {
  encode(message: QueryListPermissionSessionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sessions) {
      PermissionSession.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListPermissionSessionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListPermissionSessionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessions.push(PermissionSession.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListPermissionSessionsResponse {
    return {
      sessions: globalThis.Array.isArray(object?.sessions)
        ? object.sessions.map((e: any) => PermissionSession.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryListPermissionSessionsResponse): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => PermissionSession.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListPermissionSessionsResponse>, I>>(
    base?: I,
  ): QueryListPermissionSessionsResponse {
    return QueryListPermissionSessionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListPermissionSessionsResponse>, I>>(
    object: I,
  ): QueryListPermissionSessionsResponse {
    const message = createBaseQueryListPermissionSessionsResponse();
    message.sessions = object.sessions?.map((e) => PermissionSession.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryFindPermissionsWithDIDRequest(): QueryFindPermissionsWithDIDRequest {
  return { did: "", type: 0, schemaId: 0, country: "", when: undefined };
}

export const QueryFindPermissionsWithDIDRequest = {
  encode(message: QueryFindPermissionsWithDIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.type !== 0) {
      writer.uint32(16).uint32(message.type);
    }
    if (message.schemaId !== 0) {
      writer.uint32(24).uint64(message.schemaId);
    }
    if (message.country !== "") {
      writer.uint32(34).string(message.country);
    }
    if (message.when !== undefined) {
      Timestamp.encode(toTimestamp(message.when), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFindPermissionsWithDIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFindPermissionsWithDIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.schemaId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.country = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.when = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFindPermissionsWithDIDRequest {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      schemaId: isSet(object.schemaId) ? globalThis.Number(object.schemaId) : 0,
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      when: isSet(object.when) ? fromJsonTimestamp(object.when) : undefined,
    };
  },

  toJSON(message: QueryFindPermissionsWithDIDRequest): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.schemaId !== 0) {
      obj.schemaId = Math.round(message.schemaId);
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.when !== undefined) {
      obj.when = message.when.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFindPermissionsWithDIDRequest>, I>>(
    base?: I,
  ): QueryFindPermissionsWithDIDRequest {
    return QueryFindPermissionsWithDIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFindPermissionsWithDIDRequest>, I>>(
    object: I,
  ): QueryFindPermissionsWithDIDRequest {
    const message = createBaseQueryFindPermissionsWithDIDRequest();
    message.did = object.did ?? "";
    message.type = object.type ?? 0;
    message.schemaId = object.schemaId ?? 0;
    message.country = object.country ?? "";
    message.when = object.when ?? undefined;
    return message;
  },
};

function createBaseQueryFindPermissionsWithDIDResponse(): QueryFindPermissionsWithDIDResponse {
  return { permissions: [] };
}

export const QueryFindPermissionsWithDIDResponse = {
  encode(message: QueryFindPermissionsWithDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFindPermissionsWithDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFindPermissionsWithDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFindPermissionsWithDIDResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryFindPermissionsWithDIDResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFindPermissionsWithDIDResponse>, I>>(
    base?: I,
  ): QueryFindPermissionsWithDIDResponse {
    return QueryFindPermissionsWithDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFindPermissionsWithDIDResponse>, I>>(
    object: I,
  ): QueryFindPermissionsWithDIDResponse {
    const message = createBaseQueryFindPermissionsWithDIDResponse();
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryFindBeneficiariesRequest(): QueryFindBeneficiariesRequest {
  return { issuerPermId: 0, verifierPermId: 0 };
}

export const QueryFindBeneficiariesRequest = {
  encode(message: QueryFindBeneficiariesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuerPermId !== 0) {
      writer.uint32(8).uint64(message.issuerPermId);
    }
    if (message.verifierPermId !== 0) {
      writer.uint32(16).uint64(message.verifierPermId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFindBeneficiariesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFindBeneficiariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.issuerPermId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.verifierPermId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFindBeneficiariesRequest {
    return {
      issuerPermId: isSet(object.issuerPermId) ? globalThis.Number(object.issuerPermId) : 0,
      verifierPermId: isSet(object.verifierPermId) ? globalThis.Number(object.verifierPermId) : 0,
    };
  },

  toJSON(message: QueryFindBeneficiariesRequest): unknown {
    const obj: any = {};
    if (message.issuerPermId !== 0) {
      obj.issuerPermId = Math.round(message.issuerPermId);
    }
    if (message.verifierPermId !== 0) {
      obj.verifierPermId = Math.round(message.verifierPermId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFindBeneficiariesRequest>, I>>(base?: I): QueryFindBeneficiariesRequest {
    return QueryFindBeneficiariesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFindBeneficiariesRequest>, I>>(
    object: I,
  ): QueryFindBeneficiariesRequest {
    const message = createBaseQueryFindBeneficiariesRequest();
    message.issuerPermId = object.issuerPermId ?? 0;
    message.verifierPermId = object.verifierPermId ?? 0;
    return message;
  },
};

function createBaseQueryFindBeneficiariesResponse(): QueryFindBeneficiariesResponse {
  return { permissions: [] };
}

export const QueryFindBeneficiariesResponse = {
  encode(message: QueryFindBeneficiariesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFindBeneficiariesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFindBeneficiariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFindBeneficiariesResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryFindBeneficiariesResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFindBeneficiariesResponse>, I>>(base?: I): QueryFindBeneficiariesResponse {
    return QueryFindBeneficiariesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFindBeneficiariesResponse>, I>>(
    object: I,
  ): QueryFindBeneficiariesResponse {
    const message = createBaseQueryFindBeneficiariesResponse();
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
