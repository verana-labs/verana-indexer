// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "verana.perm.v1";

/** Permission types */
export enum PermissionType {
  PERMISSION_TYPE_UNSPECIFIED = 0,
  PERMISSION_TYPE_ISSUER = 1,
  PERMISSION_TYPE_VERIFIER = 2,
  PERMISSION_TYPE_ISSUER_GRANTOR = 3,
  PERMISSION_TYPE_VERIFIER_GRANTOR = 4,
  /** PERMISSION_TYPE_ECOSYSTEM - Changed from PERMISSION_TYPE_TRUST_REGISTRY */
  PERMISSION_TYPE_ECOSYSTEM = 5,
  PERMISSION_TYPE_HOLDER = 6,
  UNRECOGNIZED = -1,
}

export function permissionTypeFromJSON(object: any): PermissionType {
  switch (object) {
    case 0:
    case "PERMISSION_TYPE_UNSPECIFIED":
      return PermissionType.PERMISSION_TYPE_UNSPECIFIED;
    case 1:
    case "PERMISSION_TYPE_ISSUER":
      return PermissionType.PERMISSION_TYPE_ISSUER;
    case 2:
    case "PERMISSION_TYPE_VERIFIER":
      return PermissionType.PERMISSION_TYPE_VERIFIER;
    case 3:
    case "PERMISSION_TYPE_ISSUER_GRANTOR":
      return PermissionType.PERMISSION_TYPE_ISSUER_GRANTOR;
    case 4:
    case "PERMISSION_TYPE_VERIFIER_GRANTOR":
      return PermissionType.PERMISSION_TYPE_VERIFIER_GRANTOR;
    case 5:
    case "PERMISSION_TYPE_ECOSYSTEM":
      return PermissionType.PERMISSION_TYPE_ECOSYSTEM;
    case 6:
    case "PERMISSION_TYPE_HOLDER":
      return PermissionType.PERMISSION_TYPE_HOLDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PermissionType.UNRECOGNIZED;
  }
}

export function permissionTypeToJSON(object: PermissionType): string {
  switch (object) {
    case PermissionType.PERMISSION_TYPE_UNSPECIFIED:
      return "PERMISSION_TYPE_UNSPECIFIED";
    case PermissionType.PERMISSION_TYPE_ISSUER:
      return "PERMISSION_TYPE_ISSUER";
    case PermissionType.PERMISSION_TYPE_VERIFIER:
      return "PERMISSION_TYPE_VERIFIER";
    case PermissionType.PERMISSION_TYPE_ISSUER_GRANTOR:
      return "PERMISSION_TYPE_ISSUER_GRANTOR";
    case PermissionType.PERMISSION_TYPE_VERIFIER_GRANTOR:
      return "PERMISSION_TYPE_VERIFIER_GRANTOR";
    case PermissionType.PERMISSION_TYPE_ECOSYSTEM:
      return "PERMISSION_TYPE_ECOSYSTEM";
    case PermissionType.PERMISSION_TYPE_HOLDER:
      return "PERMISSION_TYPE_HOLDER";
    case PermissionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Validation process states */
export enum ValidationState {
  VALIDATION_STATE_UNSPECIFIED = 0,
  VALIDATION_STATE_PENDING = 1,
  VALIDATION_STATE_VALIDATED = 2,
  VALIDATION_STATE_TERMINATED = 3,
  VALIDATION_STATE_TERMINATION_REQUESTED = 4,
  UNRECOGNIZED = -1,
}

export function validationStateFromJSON(object: any): ValidationState {
  switch (object) {
    case 0:
    case "VALIDATION_STATE_UNSPECIFIED":
      return ValidationState.VALIDATION_STATE_UNSPECIFIED;
    case 1:
    case "VALIDATION_STATE_PENDING":
      return ValidationState.VALIDATION_STATE_PENDING;
    case 2:
    case "VALIDATION_STATE_VALIDATED":
      return ValidationState.VALIDATION_STATE_VALIDATED;
    case 3:
    case "VALIDATION_STATE_TERMINATED":
      return ValidationState.VALIDATION_STATE_TERMINATED;
    case 4:
    case "VALIDATION_STATE_TERMINATION_REQUESTED":
      return ValidationState.VALIDATION_STATE_TERMINATION_REQUESTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ValidationState.UNRECOGNIZED;
  }
}

export function validationStateToJSON(object: ValidationState): string {
  switch (object) {
    case ValidationState.VALIDATION_STATE_UNSPECIFIED:
      return "VALIDATION_STATE_UNSPECIFIED";
    case ValidationState.VALIDATION_STATE_PENDING:
      return "VALIDATION_STATE_PENDING";
    case ValidationState.VALIDATION_STATE_VALIDATED:
      return "VALIDATION_STATE_VALIDATED";
    case ValidationState.VALIDATION_STATE_TERMINATED:
      return "VALIDATION_STATE_TERMINATED";
    case ValidationState.VALIDATION_STATE_TERMINATION_REQUESTED:
      return "VALIDATION_STATE_TERMINATION_REQUESTED";
    case ValidationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Permission {
  id: number;
  schemaId: number;
  type: PermissionType;
  did: string;
  grantee: string;
  created?: Date | undefined;
  createdBy: string;
  extended?: Date | undefined;
  extendedBy: string;
  /** NEW: Slashing related fields */
  slashed?: Date | undefined;
  slashedBy: string;
  repaid?: Date | undefined;
  repaidBy: string;
  /** END NEW */
  effectiveFrom?: Date | undefined;
  effectiveUntil?: Date | undefined;
  modified?: Date | undefined;
  validationFees: number;
  issuanceFees: number;
  verificationFees: number;
  deposit: number;
  /** NEW: Slashing deposit fields */
  slashedDeposit: number;
  repaidDeposit: number;
  /** END NEW */
  revoked?: Date | undefined;
  revokedBy: string;
  terminated?: Date | undefined;
  terminatedBy: string;
  country: string;
  validatorPermId: number;
  vpState: ValidationState;
  vpExp?: Date | undefined;
  vpLastStateChange?: Date | undefined;
  vpValidatorDeposit: number;
  vpCurrentFees: number;
  vpCurrentDeposit: number;
  vpSummaryDigestSri: string;
  vpTermRequested?: Date | undefined;
}

export interface PermissionSession {
  id: string;
  controller: string;
  agentPermId: number;
  authz: SessionAuthz[];
  created?: Date | undefined;
  modified?: Date | undefined;
}

export interface SessionAuthz {
  executorPermId: number;
  beneficiaryPermId: number;
  walletAgentPermId: number;
}

function createBasePermission(): Permission {
  return {
    id: 0,
    schemaId: 0,
    type: 0,
    did: "",
    grantee: "",
    created: undefined,
    createdBy: "",
    extended: undefined,
    extendedBy: "",
    slashed: undefined,
    slashedBy: "",
    repaid: undefined,
    repaidBy: "",
    effectiveFrom: undefined,
    effectiveUntil: undefined,
    modified: undefined,
    validationFees: 0,
    issuanceFees: 0,
    verificationFees: 0,
    deposit: 0,
    slashedDeposit: 0,
    repaidDeposit: 0,
    revoked: undefined,
    revokedBy: "",
    terminated: undefined,
    terminatedBy: "",
    country: "",
    validatorPermId: 0,
    vpState: 0,
    vpExp: undefined,
    vpLastStateChange: undefined,
    vpValidatorDeposit: 0,
    vpCurrentFees: 0,
    vpCurrentDeposit: 0,
    vpSummaryDigestSri: "",
    vpTermRequested: undefined,
  };
}

export const Permission = {
  encode(message: Permission, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.schemaId !== 0) {
      writer.uint32(16).uint64(message.schemaId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.did !== "") {
      writer.uint32(34).string(message.did);
    }
    if (message.grantee !== "") {
      writer.uint32(42).string(message.grantee);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(50).fork()).ldelim();
    }
    if (message.createdBy !== "") {
      writer.uint32(58).string(message.createdBy);
    }
    if (message.extended !== undefined) {
      Timestamp.encode(toTimestamp(message.extended), writer.uint32(66).fork()).ldelim();
    }
    if (message.extendedBy !== "") {
      writer.uint32(74).string(message.extendedBy);
    }
    if (message.slashed !== undefined) {
      Timestamp.encode(toTimestamp(message.slashed), writer.uint32(82).fork()).ldelim();
    }
    if (message.slashedBy !== "") {
      writer.uint32(90).string(message.slashedBy);
    }
    if (message.repaid !== undefined) {
      Timestamp.encode(toTimestamp(message.repaid), writer.uint32(98).fork()).ldelim();
    }
    if (message.repaidBy !== "") {
      writer.uint32(106).string(message.repaidBy);
    }
    if (message.effectiveFrom !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveFrom), writer.uint32(114).fork()).ldelim();
    }
    if (message.effectiveUntil !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveUntil), writer.uint32(122).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(130).fork()).ldelim();
    }
    if (message.validationFees !== 0) {
      writer.uint32(136).uint64(message.validationFees);
    }
    if (message.issuanceFees !== 0) {
      writer.uint32(144).uint64(message.issuanceFees);
    }
    if (message.verificationFees !== 0) {
      writer.uint32(152).uint64(message.verificationFees);
    }
    if (message.deposit !== 0) {
      writer.uint32(160).uint64(message.deposit);
    }
    if (message.slashedDeposit !== 0) {
      writer.uint32(168).uint64(message.slashedDeposit);
    }
    if (message.repaidDeposit !== 0) {
      writer.uint32(176).uint64(message.repaidDeposit);
    }
    if (message.revoked !== undefined) {
      Timestamp.encode(toTimestamp(message.revoked), writer.uint32(186).fork()).ldelim();
    }
    if (message.revokedBy !== "") {
      writer.uint32(194).string(message.revokedBy);
    }
    if (message.terminated !== undefined) {
      Timestamp.encode(toTimestamp(message.terminated), writer.uint32(202).fork()).ldelim();
    }
    if (message.terminatedBy !== "") {
      writer.uint32(210).string(message.terminatedBy);
    }
    if (message.country !== "") {
      writer.uint32(218).string(message.country);
    }
    if (message.validatorPermId !== 0) {
      writer.uint32(224).uint64(message.validatorPermId);
    }
    if (message.vpState !== 0) {
      writer.uint32(232).int32(message.vpState);
    }
    if (message.vpExp !== undefined) {
      Timestamp.encode(toTimestamp(message.vpExp), writer.uint32(242).fork()).ldelim();
    }
    if (message.vpLastStateChange !== undefined) {
      Timestamp.encode(toTimestamp(message.vpLastStateChange), writer.uint32(250).fork()).ldelim();
    }
    if (message.vpValidatorDeposit !== 0) {
      writer.uint32(256).uint64(message.vpValidatorDeposit);
    }
    if (message.vpCurrentFees !== 0) {
      writer.uint32(264).uint64(message.vpCurrentFees);
    }
    if (message.vpCurrentDeposit !== 0) {
      writer.uint32(272).uint64(message.vpCurrentDeposit);
    }
    if (message.vpSummaryDigestSri !== "") {
      writer.uint32(282).string(message.vpSummaryDigestSri);
    }
    if (message.vpTermRequested !== undefined) {
      Timestamp.encode(toTimestamp(message.vpTermRequested), writer.uint32(290).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Permission {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.schemaId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.did = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.grantee = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createdBy = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.extended = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.extendedBy = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.slashed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.slashedBy = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.repaid = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.repaidBy = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.effectiveFrom = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.effectiveUntil = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.validationFees = longToNumber(reader.uint64() as Long);
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.issuanceFees = longToNumber(reader.uint64() as Long);
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.verificationFees = longToNumber(reader.uint64() as Long);
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.deposit = longToNumber(reader.uint64() as Long);
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.slashedDeposit = longToNumber(reader.uint64() as Long);
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.repaidDeposit = longToNumber(reader.uint64() as Long);
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.revoked = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.revokedBy = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.terminated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.terminatedBy = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.country = reader.string();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.validatorPermId = longToNumber(reader.uint64() as Long);
          continue;
        case 29:
          if (tag !== 232) {
            break;
          }

          message.vpState = reader.int32() as any;
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.vpExp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.vpLastStateChange = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.vpValidatorDeposit = longToNumber(reader.uint64() as Long);
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.vpCurrentFees = longToNumber(reader.uint64() as Long);
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.vpCurrentDeposit = longToNumber(reader.uint64() as Long);
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.vpSummaryDigestSri = reader.string();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.vpTermRequested = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Permission {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      schemaId: isSet(object.schemaId) ? globalThis.Number(object.schemaId) : 0,
      type: isSet(object.type) ? permissionTypeFromJSON(object.type) : 0,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      grantee: isSet(object.grantee) ? globalThis.String(object.grantee) : "",
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      createdBy: isSet(object.createdBy) ? globalThis.String(object.createdBy) : "",
      extended: isSet(object.extended) ? fromJsonTimestamp(object.extended) : undefined,
      extendedBy: isSet(object.extendedBy) ? globalThis.String(object.extendedBy) : "",
      slashed: isSet(object.slashed) ? fromJsonTimestamp(object.slashed) : undefined,
      slashedBy: isSet(object.slashedBy) ? globalThis.String(object.slashedBy) : "",
      repaid: isSet(object.repaid) ? fromJsonTimestamp(object.repaid) : undefined,
      repaidBy: isSet(object.repaidBy) ? globalThis.String(object.repaidBy) : "",
      effectiveFrom: isSet(object.effectiveFrom) ? fromJsonTimestamp(object.effectiveFrom) : undefined,
      effectiveUntil: isSet(object.effectiveUntil) ? fromJsonTimestamp(object.effectiveUntil) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
      validationFees: isSet(object.validationFees) ? globalThis.Number(object.validationFees) : 0,
      issuanceFees: isSet(object.issuanceFees) ? globalThis.Number(object.issuanceFees) : 0,
      verificationFees: isSet(object.verificationFees) ? globalThis.Number(object.verificationFees) : 0,
      deposit: isSet(object.deposit) ? globalThis.Number(object.deposit) : 0,
      slashedDeposit: isSet(object.slashedDeposit) ? globalThis.Number(object.slashedDeposit) : 0,
      repaidDeposit: isSet(object.repaidDeposit) ? globalThis.Number(object.repaidDeposit) : 0,
      revoked: isSet(object.revoked) ? fromJsonTimestamp(object.revoked) : undefined,
      revokedBy: isSet(object.revokedBy) ? globalThis.String(object.revokedBy) : "",
      terminated: isSet(object.terminated) ? fromJsonTimestamp(object.terminated) : undefined,
      terminatedBy: isSet(object.terminatedBy) ? globalThis.String(object.terminatedBy) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      validatorPermId: isSet(object.validatorPermId) ? globalThis.Number(object.validatorPermId) : 0,
      vpState: isSet(object.vpState) ? validationStateFromJSON(object.vpState) : 0,
      vpExp: isSet(object.vpExp) ? fromJsonTimestamp(object.vpExp) : undefined,
      vpLastStateChange: isSet(object.vpLastStateChange) ? fromJsonTimestamp(object.vpLastStateChange) : undefined,
      vpValidatorDeposit: isSet(object.vpValidatorDeposit) ? globalThis.Number(object.vpValidatorDeposit) : 0,
      vpCurrentFees: isSet(object.vpCurrentFees) ? globalThis.Number(object.vpCurrentFees) : 0,
      vpCurrentDeposit: isSet(object.vpCurrentDeposit) ? globalThis.Number(object.vpCurrentDeposit) : 0,
      vpSummaryDigestSri: isSet(object.vpSummaryDigestSri) ? globalThis.String(object.vpSummaryDigestSri) : "",
      vpTermRequested: isSet(object.vpTermRequested) ? fromJsonTimestamp(object.vpTermRequested) : undefined,
    };
  },

  toJSON(message: Permission): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.schemaId !== 0) {
      obj.schemaId = Math.round(message.schemaId);
    }
    if (message.type !== 0) {
      obj.type = permissionTypeToJSON(message.type);
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.createdBy !== "") {
      obj.createdBy = message.createdBy;
    }
    if (message.extended !== undefined) {
      obj.extended = message.extended.toISOString();
    }
    if (message.extendedBy !== "") {
      obj.extendedBy = message.extendedBy;
    }
    if (message.slashed !== undefined) {
      obj.slashed = message.slashed.toISOString();
    }
    if (message.slashedBy !== "") {
      obj.slashedBy = message.slashedBy;
    }
    if (message.repaid !== undefined) {
      obj.repaid = message.repaid.toISOString();
    }
    if (message.repaidBy !== "") {
      obj.repaidBy = message.repaidBy;
    }
    if (message.effectiveFrom !== undefined) {
      obj.effectiveFrom = message.effectiveFrom.toISOString();
    }
    if (message.effectiveUntil !== undefined) {
      obj.effectiveUntil = message.effectiveUntil.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    if (message.validationFees !== 0) {
      obj.validationFees = Math.round(message.validationFees);
    }
    if (message.issuanceFees !== 0) {
      obj.issuanceFees = Math.round(message.issuanceFees);
    }
    if (message.verificationFees !== 0) {
      obj.verificationFees = Math.round(message.verificationFees);
    }
    if (message.deposit !== 0) {
      obj.deposit = Math.round(message.deposit);
    }
    if (message.slashedDeposit !== 0) {
      obj.slashedDeposit = Math.round(message.slashedDeposit);
    }
    if (message.repaidDeposit !== 0) {
      obj.repaidDeposit = Math.round(message.repaidDeposit);
    }
    if (message.revoked !== undefined) {
      obj.revoked = message.revoked.toISOString();
    }
    if (message.revokedBy !== "") {
      obj.revokedBy = message.revokedBy;
    }
    if (message.terminated !== undefined) {
      obj.terminated = message.terminated.toISOString();
    }
    if (message.terminatedBy !== "") {
      obj.terminatedBy = message.terminatedBy;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.validatorPermId !== 0) {
      obj.validatorPermId = Math.round(message.validatorPermId);
    }
    if (message.vpState !== 0) {
      obj.vpState = validationStateToJSON(message.vpState);
    }
    if (message.vpExp !== undefined) {
      obj.vpExp = message.vpExp.toISOString();
    }
    if (message.vpLastStateChange !== undefined) {
      obj.vpLastStateChange = message.vpLastStateChange.toISOString();
    }
    if (message.vpValidatorDeposit !== 0) {
      obj.vpValidatorDeposit = Math.round(message.vpValidatorDeposit);
    }
    if (message.vpCurrentFees !== 0) {
      obj.vpCurrentFees = Math.round(message.vpCurrentFees);
    }
    if (message.vpCurrentDeposit !== 0) {
      obj.vpCurrentDeposit = Math.round(message.vpCurrentDeposit);
    }
    if (message.vpSummaryDigestSri !== "") {
      obj.vpSummaryDigestSri = message.vpSummaryDigestSri;
    }
    if (message.vpTermRequested !== undefined) {
      obj.vpTermRequested = message.vpTermRequested.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Permission>, I>>(base?: I): Permission {
    return Permission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Permission>, I>>(object: I): Permission {
    const message = createBasePermission();
    message.id = object.id ?? 0;
    message.schemaId = object.schemaId ?? 0;
    message.type = object.type ?? 0;
    message.did = object.did ?? "";
    message.grantee = object.grantee ?? "";
    message.created = object.created ?? undefined;
    message.createdBy = object.createdBy ?? "";
    message.extended = object.extended ?? undefined;
    message.extendedBy = object.extendedBy ?? "";
    message.slashed = object.slashed ?? undefined;
    message.slashedBy = object.slashedBy ?? "";
    message.repaid = object.repaid ?? undefined;
    message.repaidBy = object.repaidBy ?? "";
    message.effectiveFrom = object.effectiveFrom ?? undefined;
    message.effectiveUntil = object.effectiveUntil ?? undefined;
    message.modified = object.modified ?? undefined;
    message.validationFees = object.validationFees ?? 0;
    message.issuanceFees = object.issuanceFees ?? 0;
    message.verificationFees = object.verificationFees ?? 0;
    message.deposit = object.deposit ?? 0;
    message.slashedDeposit = object.slashedDeposit ?? 0;
    message.repaidDeposit = object.repaidDeposit ?? 0;
    message.revoked = object.revoked ?? undefined;
    message.revokedBy = object.revokedBy ?? "";
    message.terminated = object.terminated ?? undefined;
    message.terminatedBy = object.terminatedBy ?? "";
    message.country = object.country ?? "";
    message.validatorPermId = object.validatorPermId ?? 0;
    message.vpState = object.vpState ?? 0;
    message.vpExp = object.vpExp ?? undefined;
    message.vpLastStateChange = object.vpLastStateChange ?? undefined;
    message.vpValidatorDeposit = object.vpValidatorDeposit ?? 0;
    message.vpCurrentFees = object.vpCurrentFees ?? 0;
    message.vpCurrentDeposit = object.vpCurrentDeposit ?? 0;
    message.vpSummaryDigestSri = object.vpSummaryDigestSri ?? "";
    message.vpTermRequested = object.vpTermRequested ?? undefined;
    return message;
  },
};

function createBasePermissionSession(): PermissionSession {
  return { id: "", controller: "", agentPermId: 0, authz: [], created: undefined, modified: undefined };
}

export const PermissionSession = {
  encode(message: PermissionSession, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.controller !== "") {
      writer.uint32(18).string(message.controller);
    }
    if (message.agentPermId !== 0) {
      writer.uint32(24).uint64(message.agentPermId);
    }
    for (const v of message.authz) {
      SessionAuthz.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(42).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionSession {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.controller = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agentPermId = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authz.push(SessionAuthz.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSession {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      agentPermId: isSet(object.agentPermId) ? globalThis.Number(object.agentPermId) : 0,
      authz: globalThis.Array.isArray(object?.authz) ? object.authz.map((e: any) => SessionAuthz.fromJSON(e)) : [],
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
    };
  },

  toJSON(message: PermissionSession): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.agentPermId !== 0) {
      obj.agentPermId = Math.round(message.agentPermId);
    }
    if (message.authz?.length) {
      obj.authz = message.authz.map((e) => SessionAuthz.toJSON(e));
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionSession>, I>>(base?: I): PermissionSession {
    return PermissionSession.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionSession>, I>>(object: I): PermissionSession {
    const message = createBasePermissionSession();
    message.id = object.id ?? "";
    message.controller = object.controller ?? "";
    message.agentPermId = object.agentPermId ?? 0;
    message.authz = object.authz?.map((e) => SessionAuthz.fromPartial(e)) || [];
    message.created = object.created ?? undefined;
    message.modified = object.modified ?? undefined;
    return message;
  },
};

function createBaseSessionAuthz(): SessionAuthz {
  return { executorPermId: 0, beneficiaryPermId: 0, walletAgentPermId: 0 };
}

export const SessionAuthz = {
  encode(message: SessionAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.executorPermId !== 0) {
      writer.uint32(8).uint64(message.executorPermId);
    }
    if (message.beneficiaryPermId !== 0) {
      writer.uint32(16).uint64(message.beneficiaryPermId);
    }
    if (message.walletAgentPermId !== 0) {
      writer.uint32(24).uint64(message.walletAgentPermId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SessionAuthz {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.executorPermId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.beneficiaryPermId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.walletAgentPermId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionAuthz {
    return {
      executorPermId: isSet(object.executorPermId) ? globalThis.Number(object.executorPermId) : 0,
      beneficiaryPermId: isSet(object.beneficiaryPermId) ? globalThis.Number(object.beneficiaryPermId) : 0,
      walletAgentPermId: isSet(object.walletAgentPermId) ? globalThis.Number(object.walletAgentPermId) : 0,
    };
  },

  toJSON(message: SessionAuthz): unknown {
    const obj: any = {};
    if (message.executorPermId !== 0) {
      obj.executorPermId = Math.round(message.executorPermId);
    }
    if (message.beneficiaryPermId !== 0) {
      obj.beneficiaryPermId = Math.round(message.beneficiaryPermId);
    }
    if (message.walletAgentPermId !== 0) {
      obj.walletAgentPermId = Math.round(message.walletAgentPermId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionAuthz>, I>>(base?: I): SessionAuthz {
    return SessionAuthz.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionAuthz>, I>>(object: I): SessionAuthz {
    const message = createBaseSessionAuthz();
    message.executorPermId = object.executorPermId ?? 0;
    message.beneficiaryPermId = object.beneficiaryPermId ?? 0;
    message.walletAgentPermId = object.walletAgentPermId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
