// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/dd/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";
import { Params } from "./params";
import { DIDDirectory } from "./types";

export const protobufPackage = "verana.dd.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

export interface QueryListDIDsRequest {
  account: string;
  changed?: Date | undefined;
  expired: boolean;
  overGrace: boolean;
  responseMaxSize: number;
}

export interface QueryListDIDsResponse {
  dids: DIDDirectory[];
}

export interface QueryGetDIDRequest {
  did: string;
}

export interface QueryGetDIDResponse {
  didEntry?: DIDDirectory | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryListDIDsRequest(): QueryListDIDsRequest {
  return { account: "", changed: undefined, expired: false, overGrace: false, responseMaxSize: 0 };
}

export const QueryListDIDsRequest = {
  encode(message: QueryListDIDsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.changed !== undefined) {
      Timestamp.encode(toTimestamp(message.changed), writer.uint32(18).fork()).ldelim();
    }
    if (message.expired !== false) {
      writer.uint32(24).bool(message.expired);
    }
    if (message.overGrace !== false) {
      writer.uint32(32).bool(message.overGrace);
    }
    if (message.responseMaxSize !== 0) {
      writer.uint32(40).uint32(message.responseMaxSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListDIDsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListDIDsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.changed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.expired = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.overGrace = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseMaxSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListDIDsRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      changed: isSet(object.changed) ? fromJsonTimestamp(object.changed) : undefined,
      expired: isSet(object.expired) ? globalThis.Boolean(object.expired) : false,
      overGrace: isSet(object.overGrace) ? globalThis.Boolean(object.overGrace) : false,
      responseMaxSize: isSet(object.responseMaxSize) ? globalThis.Number(object.responseMaxSize) : 0,
    };
  },

  toJSON(message: QueryListDIDsRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.changed !== undefined) {
      obj.changed = message.changed.toISOString();
    }
    if (message.expired !== false) {
      obj.expired = message.expired;
    }
    if (message.overGrace !== false) {
      obj.overGrace = message.overGrace;
    }
    if (message.responseMaxSize !== 0) {
      obj.responseMaxSize = Math.round(message.responseMaxSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListDIDsRequest>, I>>(base?: I): QueryListDIDsRequest {
    return QueryListDIDsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListDIDsRequest>, I>>(object: I): QueryListDIDsRequest {
    const message = createBaseQueryListDIDsRequest();
    message.account = object.account ?? "";
    message.changed = object.changed ?? undefined;
    message.expired = object.expired ?? false;
    message.overGrace = object.overGrace ?? false;
    message.responseMaxSize = object.responseMaxSize ?? 0;
    return message;
  },
};

function createBaseQueryListDIDsResponse(): QueryListDIDsResponse {
  return { dids: [] };
}

export const QueryListDIDsResponse = {
  encode(message: QueryListDIDsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.dids) {
      DIDDirectory.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListDIDsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListDIDsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dids.push(DIDDirectory.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListDIDsResponse {
    return {
      dids: globalThis.Array.isArray(object?.dids) ? object.dids.map((e: any) => DIDDirectory.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryListDIDsResponse): unknown {
    const obj: any = {};
    if (message.dids?.length) {
      obj.dids = message.dids.map((e) => DIDDirectory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListDIDsResponse>, I>>(base?: I): QueryListDIDsResponse {
    return QueryListDIDsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListDIDsResponse>, I>>(object: I): QueryListDIDsResponse {
    const message = createBaseQueryListDIDsResponse();
    message.dids = object.dids?.map((e) => DIDDirectory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetDIDRequest(): QueryGetDIDRequest {
  return { did: "" };
}

export const QueryGetDIDRequest = {
  encode(message: QueryGetDIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetDIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDIDRequest {
    return { did: isSet(object.did) ? globalThis.String(object.did) : "" };
  },

  toJSON(message: QueryGetDIDRequest): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetDIDRequest>, I>>(base?: I): QueryGetDIDRequest {
    return QueryGetDIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetDIDRequest>, I>>(object: I): QueryGetDIDRequest {
    const message = createBaseQueryGetDIDRequest();
    message.did = object.did ?? "";
    return message;
  },
};

function createBaseQueryGetDIDResponse(): QueryGetDIDResponse {
  return { didEntry: undefined };
}

export const QueryGetDIDResponse = {
  encode(message: QueryGetDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.didEntry !== undefined) {
      DIDDirectory.encode(message.didEntry, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.didEntry = DIDDirectory.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDIDResponse {
    return { didEntry: isSet(object.didEntry) ? DIDDirectory.fromJSON(object.didEntry) : undefined };
  },

  toJSON(message: QueryGetDIDResponse): unknown {
    const obj: any = {};
    if (message.didEntry !== undefined) {
      obj.didEntry = DIDDirectory.toJSON(message.didEntry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetDIDResponse>, I>>(base?: I): QueryGetDIDResponse {
    return QueryGetDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetDIDResponse>, I>>(object: I): QueryGetDIDResponse {
    const message = createBaseQueryGetDIDResponse();
    message.didEntry = (object.didEntry !== undefined && object.didEntry !== null)
      ? DIDDirectory.fromPartial(object.didEntry)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  ListDIDs(request: QueryListDIDsRequest): Promise<QueryListDIDsResponse>;
  GetDID(request: QueryGetDIDRequest): Promise<QueryGetDIDResponse>;
}

export const QueryServiceName = "verana.dd.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.ListDIDs = this.ListDIDs.bind(this);
    this.GetDID = this.GetDID.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  ListDIDs(request: QueryListDIDsRequest): Promise<QueryListDIDsResponse> {
    const data = QueryListDIDsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListDIDs", data);
    return promise.then((data) => QueryListDIDsResponse.decode(_m0.Reader.create(data)));
  }

  GetDID(request: QueryGetDIDRequest): Promise<QueryGetDIDResponse> {
    const data = QueryGetDIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDID", data);
    return promise.then((data) => QueryGetDIDResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
