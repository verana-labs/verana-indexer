// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/dd/v1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";

export const protobufPackage = "verana.dd.v1";

/** Core DIDDirectory type */
export interface DIDDirectory {
  did: string;
  controller: string;
  created?: Date | undefined;
  modified?: Date | undefined;
  exp?: Date | undefined;
  deposit: Long;
}

function createBaseDIDDirectory(): DIDDirectory {
  return { did: "", controller: "", created: undefined, modified: undefined, exp: undefined, deposit: Long.ZERO };
}

export const DIDDirectory = {
  encode(message: DIDDirectory, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.controller !== "") {
      writer.uint32(18).string(message.controller);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(26).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(34).fork()).ldelim();
    }
    if (message.exp !== undefined) {
      Timestamp.encode(toTimestamp(message.exp), writer.uint32(42).fork()).ldelim();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.deposit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DIDDirectory {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDIDDirectory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.controller = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.exp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.deposit = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DIDDirectory {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
      exp: isSet(object.exp) ? fromJsonTimestamp(object.exp) : undefined,
      deposit: isSet(object.deposit) ? Long.fromValue(object.deposit) : Long.ZERO,
    };
  },

  toJSON(message: DIDDirectory): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    if (message.exp !== undefined) {
      obj.exp = message.exp.toISOString();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      obj.deposit = (message.deposit || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DIDDirectory>, I>>(base?: I): DIDDirectory {
    return DIDDirectory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DIDDirectory>, I>>(object: I): DIDDirectory {
    const message = createBaseDIDDirectory();
    message.did = object.did ?? "";
    message.controller = object.controller ?? "";
    message.created = object.created ?? undefined;
    message.modified = object.modified ?? undefined;
    message.exp = object.exp ?? undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Long.fromValue(object.deposit)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
