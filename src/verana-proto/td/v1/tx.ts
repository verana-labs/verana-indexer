// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/td/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";

export const protobufPackage = "verana.td.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgReclaimTrustDepositYield defines the request type */
export interface MsgReclaimTrustDepositYield {
  creator: string;
}

/** MsgReclaimTrustDepositYieldResponse defines the response type */
export interface MsgReclaimTrustDepositYieldResponse {
  claimedAmount: Long;
}

export interface MsgReclaimTrustDeposit {
  creator: string;
  /** Amount to reclaim in denom */
  claimed: Long;
}

export interface MsgReclaimTrustDepositResponse {
  /** Amount burned */
  burnedAmount: Long;
  /** Amount transferred to account */
  claimedAmount: Long;
}

export interface MsgRepaySlashedTrustDeposit {
  creator: string;
  account: string;
  amount: Long;
}

export interface MsgRepaySlashedTrustDepositResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgReclaimTrustDepositYield(): MsgReclaimTrustDepositYield {
  return { creator: "" };
}

export const MsgReclaimTrustDepositYield = {
  encode(message: MsgReclaimTrustDepositYield, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgReclaimTrustDepositYield {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReclaimTrustDepositYield();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReclaimTrustDepositYield {
    return { creator: isSet(object.creator) ? globalThis.String(object.creator) : "" };
  },

  toJSON(message: MsgReclaimTrustDepositYield): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReclaimTrustDepositYield>, I>>(base?: I): MsgReclaimTrustDepositYield {
    return MsgReclaimTrustDepositYield.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReclaimTrustDepositYield>, I>>(object: I): MsgReclaimTrustDepositYield {
    const message = createBaseMsgReclaimTrustDepositYield();
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseMsgReclaimTrustDepositYieldResponse(): MsgReclaimTrustDepositYieldResponse {
  return { claimedAmount: Long.UZERO };
}

export const MsgReclaimTrustDepositYieldResponse = {
  encode(message: MsgReclaimTrustDepositYieldResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.claimedAmount.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.claimedAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgReclaimTrustDepositYieldResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReclaimTrustDepositYieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.claimedAmount = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReclaimTrustDepositYieldResponse {
    return { claimedAmount: isSet(object.claimedAmount) ? Long.fromValue(object.claimedAmount) : Long.UZERO };
  },

  toJSON(message: MsgReclaimTrustDepositYieldResponse): unknown {
    const obj: any = {};
    if (!message.claimedAmount.equals(Long.UZERO)) {
      obj.claimedAmount = (message.claimedAmount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReclaimTrustDepositYieldResponse>, I>>(
    base?: I,
  ): MsgReclaimTrustDepositYieldResponse {
    return MsgReclaimTrustDepositYieldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReclaimTrustDepositYieldResponse>, I>>(
    object: I,
  ): MsgReclaimTrustDepositYieldResponse {
    const message = createBaseMsgReclaimTrustDepositYieldResponse();
    message.claimedAmount = (object.claimedAmount !== undefined && object.claimedAmount !== null)
      ? Long.fromValue(object.claimedAmount)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgReclaimTrustDeposit(): MsgReclaimTrustDeposit {
  return { creator: "", claimed: Long.UZERO };
}

export const MsgReclaimTrustDeposit = {
  encode(message: MsgReclaimTrustDeposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.claimed.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.claimed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgReclaimTrustDeposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReclaimTrustDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.claimed = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReclaimTrustDeposit {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      claimed: isSet(object.claimed) ? Long.fromValue(object.claimed) : Long.UZERO,
    };
  },

  toJSON(message: MsgReclaimTrustDeposit): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.claimed.equals(Long.UZERO)) {
      obj.claimed = (message.claimed || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReclaimTrustDeposit>, I>>(base?: I): MsgReclaimTrustDeposit {
    return MsgReclaimTrustDeposit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReclaimTrustDeposit>, I>>(object: I): MsgReclaimTrustDeposit {
    const message = createBaseMsgReclaimTrustDeposit();
    message.creator = object.creator ?? "";
    message.claimed = (object.claimed !== undefined && object.claimed !== null)
      ? Long.fromValue(object.claimed)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgReclaimTrustDepositResponse(): MsgReclaimTrustDepositResponse {
  return { burnedAmount: Long.UZERO, claimedAmount: Long.UZERO };
}

export const MsgReclaimTrustDepositResponse = {
  encode(message: MsgReclaimTrustDepositResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.burnedAmount.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.burnedAmount);
    }
    if (!message.claimedAmount.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.claimedAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgReclaimTrustDepositResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReclaimTrustDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.burnedAmount = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.claimedAmount = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReclaimTrustDepositResponse {
    return {
      burnedAmount: isSet(object.burnedAmount) ? Long.fromValue(object.burnedAmount) : Long.UZERO,
      claimedAmount: isSet(object.claimedAmount) ? Long.fromValue(object.claimedAmount) : Long.UZERO,
    };
  },

  toJSON(message: MsgReclaimTrustDepositResponse): unknown {
    const obj: any = {};
    if (!message.burnedAmount.equals(Long.UZERO)) {
      obj.burnedAmount = (message.burnedAmount || Long.UZERO).toString();
    }
    if (!message.claimedAmount.equals(Long.UZERO)) {
      obj.claimedAmount = (message.claimedAmount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReclaimTrustDepositResponse>, I>>(base?: I): MsgReclaimTrustDepositResponse {
    return MsgReclaimTrustDepositResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReclaimTrustDepositResponse>, I>>(
    object: I,
  ): MsgReclaimTrustDepositResponse {
    const message = createBaseMsgReclaimTrustDepositResponse();
    message.burnedAmount = (object.burnedAmount !== undefined && object.burnedAmount !== null)
      ? Long.fromValue(object.burnedAmount)
      : Long.UZERO;
    message.claimedAmount = (object.claimedAmount !== undefined && object.claimedAmount !== null)
      ? Long.fromValue(object.claimedAmount)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgRepaySlashedTrustDeposit(): MsgRepaySlashedTrustDeposit {
  return { creator: "", account: "", amount: Long.UZERO };
}

export const MsgRepaySlashedTrustDeposit = {
  encode(message: MsgRepaySlashedTrustDeposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (!message.amount.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRepaySlashedTrustDeposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRepaySlashedTrustDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRepaySlashedTrustDeposit {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      amount: isSet(object.amount) ? Long.fromValue(object.amount) : Long.UZERO,
    };
  },

  toJSON(message: MsgRepaySlashedTrustDeposit): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (!message.amount.equals(Long.UZERO)) {
      obj.amount = (message.amount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRepaySlashedTrustDeposit>, I>>(base?: I): MsgRepaySlashedTrustDeposit {
    return MsgRepaySlashedTrustDeposit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRepaySlashedTrustDeposit>, I>>(object: I): MsgRepaySlashedTrustDeposit {
    const message = createBaseMsgRepaySlashedTrustDeposit();
    message.creator = object.creator ?? "";
    message.account = object.account ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Long.fromValue(object.amount)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgRepaySlashedTrustDepositResponse(): MsgRepaySlashedTrustDepositResponse {
  return {};
}

export const MsgRepaySlashedTrustDepositResponse = {
  encode(_: MsgRepaySlashedTrustDepositResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRepaySlashedTrustDepositResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRepaySlashedTrustDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRepaySlashedTrustDepositResponse {
    return {};
  },

  toJSON(_: MsgRepaySlashedTrustDepositResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRepaySlashedTrustDepositResponse>, I>>(
    base?: I,
  ): MsgRepaySlashedTrustDepositResponse {
    return MsgRepaySlashedTrustDepositResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRepaySlashedTrustDepositResponse>, I>>(
    _: I,
  ): MsgRepaySlashedTrustDepositResponse {
    const message = createBaseMsgRepaySlashedTrustDepositResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  ReclaimTrustDepositYield(request: MsgReclaimTrustDepositYield): Promise<MsgReclaimTrustDepositYieldResponse>;
  ReclaimTrustDeposit(request: MsgReclaimTrustDeposit): Promise<MsgReclaimTrustDepositResponse>;
  /** rpc SlashTrustDeposit(MsgSlashTrustDeposit) returns (MsgSlashTrustDepositResponse); */
  RepaySlashedTrustDeposit(request: MsgRepaySlashedTrustDeposit): Promise<MsgRepaySlashedTrustDepositResponse>;
}

export const MsgServiceName = "verana.td.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.ReclaimTrustDepositYield = this.ReclaimTrustDepositYield.bind(this);
    this.ReclaimTrustDeposit = this.ReclaimTrustDeposit.bind(this);
    this.RepaySlashedTrustDeposit = this.RepaySlashedTrustDeposit.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }

  ReclaimTrustDepositYield(request: MsgReclaimTrustDepositYield): Promise<MsgReclaimTrustDepositYieldResponse> {
    const data = MsgReclaimTrustDepositYield.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReclaimTrustDepositYield", data);
    return promise.then((data) => MsgReclaimTrustDepositYieldResponse.decode(_m0.Reader.create(data)));
  }

  ReclaimTrustDeposit(request: MsgReclaimTrustDeposit): Promise<MsgReclaimTrustDepositResponse> {
    const data = MsgReclaimTrustDeposit.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReclaimTrustDeposit", data);
    return promise.then((data) => MsgReclaimTrustDepositResponse.decode(_m0.Reader.create(data)));
  }

  RepaySlashedTrustDeposit(request: MsgRepaySlashedTrustDeposit): Promise<MsgRepaySlashedTrustDepositResponse> {
    const data = MsgRepaySlashedTrustDeposit.encode(request).finish();
    const promise = this.rpc.request(this.service, "RepaySlashedTrustDeposit", data);
    return promise.then((data) => MsgRepaySlashedTrustDepositResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
