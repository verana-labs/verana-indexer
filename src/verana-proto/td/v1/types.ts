// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/td/v1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";

export const protobufPackage = "verana.td.v1";

/** TrustDeposit represents an account's trust deposit */
export interface TrustDeposit {
  account: string;
  share: Long;
  amount: Long;
  claimable: Long;
  /** NEW v2 fields: Slashing related */
  slashedDeposit: Long;
  repaidDeposit: Long;
  lastSlashed?: Date | undefined;
  lastRepaid?: Date | undefined;
  slashCount: Long;
  lastRepaidBy: string;
}

export interface SlashTrustDepositProposal {
  title: string;
  description: string;
  account: string;
  amount: string;
}

function createBaseTrustDeposit(): TrustDeposit {
  return {
    account: "",
    share: Long.UZERO,
    amount: Long.UZERO,
    claimable: Long.UZERO,
    slashedDeposit: Long.UZERO,
    repaidDeposit: Long.UZERO,
    lastSlashed: undefined,
    lastRepaid: undefined,
    slashCount: Long.UZERO,
    lastRepaidBy: "",
  };
}

export const TrustDeposit = {
  encode(message: TrustDeposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (!message.share.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.share);
    }
    if (!message.amount.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.amount);
    }
    if (!message.claimable.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.claimable);
    }
    if (!message.slashedDeposit.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.slashedDeposit);
    }
    if (!message.repaidDeposit.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.repaidDeposit);
    }
    if (message.lastSlashed !== undefined) {
      Timestamp.encode(toTimestamp(message.lastSlashed), writer.uint32(58).fork()).ldelim();
    }
    if (message.lastRepaid !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRepaid), writer.uint32(66).fork()).ldelim();
    }
    if (!message.slashCount.equals(Long.UZERO)) {
      writer.uint32(72).uint64(message.slashCount);
    }
    if (message.lastRepaidBy !== "") {
      writer.uint32(82).string(message.lastRepaidBy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrustDeposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrustDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.share = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.claimable = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.slashedDeposit = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.repaidDeposit = reader.uint64() as Long;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.lastSlashed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.lastRepaid = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.slashCount = reader.uint64() as Long;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.lastRepaidBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrustDeposit {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      share: isSet(object.share) ? Long.fromValue(object.share) : Long.UZERO,
      amount: isSet(object.amount) ? Long.fromValue(object.amount) : Long.UZERO,
      claimable: isSet(object.claimable) ? Long.fromValue(object.claimable) : Long.UZERO,
      slashedDeposit: isSet(object.slashedDeposit) ? Long.fromValue(object.slashedDeposit) : Long.UZERO,
      repaidDeposit: isSet(object.repaidDeposit) ? Long.fromValue(object.repaidDeposit) : Long.UZERO,
      lastSlashed: isSet(object.lastSlashed) ? fromJsonTimestamp(object.lastSlashed) : undefined,
      lastRepaid: isSet(object.lastRepaid) ? fromJsonTimestamp(object.lastRepaid) : undefined,
      slashCount: isSet(object.slashCount) ? Long.fromValue(object.slashCount) : Long.UZERO,
      lastRepaidBy: isSet(object.lastRepaidBy) ? globalThis.String(object.lastRepaidBy) : "",
    };
  },

  toJSON(message: TrustDeposit): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (!message.share.equals(Long.UZERO)) {
      obj.share = (message.share || Long.UZERO).toString();
    }
    if (!message.amount.equals(Long.UZERO)) {
      obj.amount = (message.amount || Long.UZERO).toString();
    }
    if (!message.claimable.equals(Long.UZERO)) {
      obj.claimable = (message.claimable || Long.UZERO).toString();
    }
    if (!message.slashedDeposit.equals(Long.UZERO)) {
      obj.slashedDeposit = (message.slashedDeposit || Long.UZERO).toString();
    }
    if (!message.repaidDeposit.equals(Long.UZERO)) {
      obj.repaidDeposit = (message.repaidDeposit || Long.UZERO).toString();
    }
    if (message.lastSlashed !== undefined) {
      obj.lastSlashed = message.lastSlashed.toISOString();
    }
    if (message.lastRepaid !== undefined) {
      obj.lastRepaid = message.lastRepaid.toISOString();
    }
    if (!message.slashCount.equals(Long.UZERO)) {
      obj.slashCount = (message.slashCount || Long.UZERO).toString();
    }
    if (message.lastRepaidBy !== "") {
      obj.lastRepaidBy = message.lastRepaidBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrustDeposit>, I>>(base?: I): TrustDeposit {
    return TrustDeposit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrustDeposit>, I>>(object: I): TrustDeposit {
    const message = createBaseTrustDeposit();
    message.account = object.account ?? "";
    message.share = (object.share !== undefined && object.share !== null) ? Long.fromValue(object.share) : Long.UZERO;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Long.fromValue(object.amount)
      : Long.UZERO;
    message.claimable = (object.claimable !== undefined && object.claimable !== null)
      ? Long.fromValue(object.claimable)
      : Long.UZERO;
    message.slashedDeposit = (object.slashedDeposit !== undefined && object.slashedDeposit !== null)
      ? Long.fromValue(object.slashedDeposit)
      : Long.UZERO;
    message.repaidDeposit = (object.repaidDeposit !== undefined && object.repaidDeposit !== null)
      ? Long.fromValue(object.repaidDeposit)
      : Long.UZERO;
    message.lastSlashed = object.lastSlashed ?? undefined;
    message.lastRepaid = object.lastRepaid ?? undefined;
    message.slashCount = (object.slashCount !== undefined && object.slashCount !== null)
      ? Long.fromValue(object.slashCount)
      : Long.UZERO;
    message.lastRepaidBy = object.lastRepaidBy ?? "";
    return message;
  },
};

function createBaseSlashTrustDepositProposal(): SlashTrustDepositProposal {
  return { title: "", description: "", account: "", amount: "" };
}

export const SlashTrustDepositProposal = {
  encode(message: SlashTrustDepositProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SlashTrustDepositProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashTrustDepositProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashTrustDepositProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: SlashTrustDepositProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlashTrustDepositProposal>, I>>(base?: I): SlashTrustDepositProposal {
    return SlashTrustDepositProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlashTrustDepositProposal>, I>>(object: I): SlashTrustDepositProposal {
    const message = createBaseSlashTrustDepositProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.account = object.account ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
