// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/cs/v1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";

export const protobufPackage = "verana.cs.v1";

/** CredentialSchemaPermManagementMode defines how permissions are managed */
export enum CredentialSchemaPermManagementMode {
  /** MODE_UNSPECIFIED - Default to prevent accidental omission */
  MODE_UNSPECIFIED = 0,
  /** OPEN - Anyone can create their own permission */
  OPEN = 1,
  /** GRANTOR_VALIDATION - Requires validation from a grantor */
  GRANTOR_VALIDATION = 2,
  /** ECOSYSTEM - Requires validation from ecosystem (was TRUST_REGISTRY_VALIDATION) */
  ECOSYSTEM = 3,
  UNRECOGNIZED = -1,
}

export function credentialSchemaPermManagementModeFromJSON(object: any): CredentialSchemaPermManagementMode {
  switch (object) {
    case 0:
    case "MODE_UNSPECIFIED":
      return CredentialSchemaPermManagementMode.MODE_UNSPECIFIED;
    case 1:
    case "OPEN":
      return CredentialSchemaPermManagementMode.OPEN;
    case 2:
    case "GRANTOR_VALIDATION":
      return CredentialSchemaPermManagementMode.GRANTOR_VALIDATION;
    case 3:
    case "ECOSYSTEM":
      return CredentialSchemaPermManagementMode.ECOSYSTEM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CredentialSchemaPermManagementMode.UNRECOGNIZED;
  }
}

export function credentialSchemaPermManagementModeToJSON(object: CredentialSchemaPermManagementMode): string {
  switch (object) {
    case CredentialSchemaPermManagementMode.MODE_UNSPECIFIED:
      return "MODE_UNSPECIFIED";
    case CredentialSchemaPermManagementMode.OPEN:
      return "OPEN";
    case CredentialSchemaPermManagementMode.GRANTOR_VALIDATION:
      return "GRANTOR_VALIDATION";
    case CredentialSchemaPermManagementMode.ECOSYSTEM:
      return "ECOSYSTEM";
    case CredentialSchemaPermManagementMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CredentialSchema defines the structure for a credential schema */
export interface CredentialSchema {
  id: Long;
  trId: Long;
  created?: Date | undefined;
  modified?: Date | undefined;
  archived?: Date | undefined;
  deposit: Long;
  jsonSchema: string;
  issuerGrantorValidationValidityPeriod: number;
  verifierGrantorValidationValidityPeriod: number;
  issuerValidationValidityPeriod: number;
  verifierValidationValidityPeriod: number;
  holderValidationValidityPeriod: number;
  issuerPermManagementMode: CredentialSchemaPermManagementMode;
  verifierPermManagementMode: CredentialSchemaPermManagementMode;
}

function createBaseCredentialSchema(): CredentialSchema {
  return {
    id: Long.UZERO,
    trId: Long.UZERO,
    created: undefined,
    modified: undefined,
    archived: undefined,
    deposit: Long.UZERO,
    jsonSchema: "",
    issuerGrantorValidationValidityPeriod: 0,
    verifierGrantorValidationValidityPeriod: 0,
    issuerValidationValidityPeriod: 0,
    verifierValidationValidityPeriod: 0,
    holderValidationValidityPeriod: 0,
    issuerPermManagementMode: 0,
    verifierPermManagementMode: 0,
  };
}

export const CredentialSchema = {
  encode(message: CredentialSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.trId);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(26).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(34).fork()).ldelim();
    }
    if (message.archived !== undefined) {
      Timestamp.encode(toTimestamp(message.archived), writer.uint32(42).fork()).ldelim();
    }
    if (!message.deposit.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.deposit);
    }
    if (message.jsonSchema !== "") {
      writer.uint32(58).string(message.jsonSchema);
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      writer.uint32(64).uint32(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      writer.uint32(72).uint32(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      writer.uint32(80).uint32(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      writer.uint32(88).uint32(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      writer.uint32(96).uint32(message.holderValidationValidityPeriod);
    }
    if (message.issuerPermManagementMode !== 0) {
      writer.uint32(104).int32(message.issuerPermManagementMode);
    }
    if (message.verifierPermManagementMode !== 0) {
      writer.uint32(112).int32(message.verifierPermManagementMode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CredentialSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentialSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.archived = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.deposit = reader.uint64() as Long;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.jsonSchema = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.issuerGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.verifierGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.issuerValidationValidityPeriod = reader.uint32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.verifierValidationValidityPeriod = reader.uint32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.holderValidationValidityPeriod = reader.uint32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.issuerPermManagementMode = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.verifierPermManagementMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CredentialSchema {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
      archived: isSet(object.archived) ? fromJsonTimestamp(object.archived) : undefined,
      deposit: isSet(object.deposit) ? Long.fromValue(object.deposit) : Long.UZERO,
      jsonSchema: isSet(object.jsonSchema) ? globalThis.String(object.jsonSchema) : "",
      issuerGrantorValidationValidityPeriod: isSet(object.issuerGrantorValidationValidityPeriod)
        ? globalThis.Number(object.issuerGrantorValidationValidityPeriod)
        : 0,
      verifierGrantorValidationValidityPeriod: isSet(object.verifierGrantorValidationValidityPeriod)
        ? globalThis.Number(object.verifierGrantorValidationValidityPeriod)
        : 0,
      issuerValidationValidityPeriod: isSet(object.issuerValidationValidityPeriod)
        ? globalThis.Number(object.issuerValidationValidityPeriod)
        : 0,
      verifierValidationValidityPeriod: isSet(object.verifierValidationValidityPeriod)
        ? globalThis.Number(object.verifierValidationValidityPeriod)
        : 0,
      holderValidationValidityPeriod: isSet(object.holderValidationValidityPeriod)
        ? globalThis.Number(object.holderValidationValidityPeriod)
        : 0,
      issuerPermManagementMode: isSet(object.issuerPermManagementMode)
        ? credentialSchemaPermManagementModeFromJSON(object.issuerPermManagementMode)
        : 0,
      verifierPermManagementMode: isSet(object.verifierPermManagementMode)
        ? credentialSchemaPermManagementModeFromJSON(object.verifierPermManagementMode)
        : 0,
    };
  },

  toJSON(message: CredentialSchema): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    if (message.archived !== undefined) {
      obj.archived = message.archived.toISOString();
    }
    if (!message.deposit.equals(Long.UZERO)) {
      obj.deposit = (message.deposit || Long.UZERO).toString();
    }
    if (message.jsonSchema !== "") {
      obj.jsonSchema = message.jsonSchema;
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      obj.issuerGrantorValidationValidityPeriod = Math.round(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      obj.verifierGrantorValidationValidityPeriod = Math.round(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      obj.issuerValidationValidityPeriod = Math.round(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      obj.verifierValidationValidityPeriod = Math.round(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      obj.holderValidationValidityPeriod = Math.round(message.holderValidationValidityPeriod);
    }
    if (message.issuerPermManagementMode !== 0) {
      obj.issuerPermManagementMode = credentialSchemaPermManagementModeToJSON(message.issuerPermManagementMode);
    }
    if (message.verifierPermManagementMode !== 0) {
      obj.verifierPermManagementMode = credentialSchemaPermManagementModeToJSON(message.verifierPermManagementMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CredentialSchema>, I>>(base?: I): CredentialSchema {
    return CredentialSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CredentialSchema>, I>>(object: I): CredentialSchema {
    const message = createBaseCredentialSchema();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.created = object.created ?? undefined;
    message.modified = object.modified ?? undefined;
    message.archived = object.archived ?? undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Long.fromValue(object.deposit)
      : Long.UZERO;
    message.jsonSchema = object.jsonSchema ?? "";
    message.issuerGrantorValidationValidityPeriod = object.issuerGrantorValidationValidityPeriod ?? 0;
    message.verifierGrantorValidationValidityPeriod = object.verifierGrantorValidationValidityPeriod ?? 0;
    message.issuerValidationValidityPeriod = object.issuerValidationValidityPeriod ?? 0;
    message.verifierValidationValidityPeriod = object.verifierValidationValidityPeriod ?? 0;
    message.holderValidationValidityPeriod = object.holderValidationValidityPeriod ?? 0;
    message.issuerPermManagementMode = object.issuerPermManagementMode ?? 0;
    message.verifierPermManagementMode = object.verifierPermManagementMode ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
