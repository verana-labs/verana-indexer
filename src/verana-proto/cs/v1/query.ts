// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/cs/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";
import { Params } from "./params";
import { CredentialSchema } from "./types";

export const protobufPackage = "verana.cs.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

export interface QueryListCredentialSchemasRequest {
  /** optional */
  trId: Long;
  modifiedAfter?: Date | undefined;
  responseMaxSize: number;
}

export interface QueryListCredentialSchemasResponse {
  schemas: CredentialSchema[];
}

export interface QueryGetCredentialSchemaRequest {
  id: Long;
}

export interface QueryGetCredentialSchemaResponse {
  schema?: CredentialSchema | undefined;
}

export interface QueryRenderJsonSchemaRequest {
  id: Long;
}

export interface QueryRenderJsonSchemaResponse {
  schema: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryListCredentialSchemasRequest(): QueryListCredentialSchemasRequest {
  return { trId: Long.UZERO, modifiedAfter: undefined, responseMaxSize: 0 };
}

export const QueryListCredentialSchemasRequest = {
  encode(message: QueryListCredentialSchemasRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.trId);
    }
    if (message.modifiedAfter !== undefined) {
      Timestamp.encode(toTimestamp(message.modifiedAfter), writer.uint32(18).fork()).ldelim();
    }
    if (message.responseMaxSize !== 0) {
      writer.uint32(24).uint32(message.responseMaxSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListCredentialSchemasRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListCredentialSchemasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modifiedAfter = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.responseMaxSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListCredentialSchemasRequest {
    return {
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      modifiedAfter: isSet(object.modifiedAfter) ? fromJsonTimestamp(object.modifiedAfter) : undefined,
      responseMaxSize: isSet(object.responseMaxSize) ? globalThis.Number(object.responseMaxSize) : 0,
    };
  },

  toJSON(message: QueryListCredentialSchemasRequest): unknown {
    const obj: any = {};
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.modifiedAfter !== undefined) {
      obj.modifiedAfter = message.modifiedAfter.toISOString();
    }
    if (message.responseMaxSize !== 0) {
      obj.responseMaxSize = Math.round(message.responseMaxSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListCredentialSchemasRequest>, I>>(
    base?: I,
  ): QueryListCredentialSchemasRequest {
    return QueryListCredentialSchemasRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListCredentialSchemasRequest>, I>>(
    object: I,
  ): QueryListCredentialSchemasRequest {
    const message = createBaseQueryListCredentialSchemasRequest();
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.modifiedAfter = object.modifiedAfter ?? undefined;
    message.responseMaxSize = object.responseMaxSize ?? 0;
    return message;
  },
};

function createBaseQueryListCredentialSchemasResponse(): QueryListCredentialSchemasResponse {
  return { schemas: [] };
}

export const QueryListCredentialSchemasResponse = {
  encode(message: QueryListCredentialSchemasResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.schemas) {
      CredentialSchema.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListCredentialSchemasResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListCredentialSchemasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schemas.push(CredentialSchema.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListCredentialSchemasResponse {
    return {
      schemas: globalThis.Array.isArray(object?.schemas)
        ? object.schemas.map((e: any) => CredentialSchema.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryListCredentialSchemasResponse): unknown {
    const obj: any = {};
    if (message.schemas?.length) {
      obj.schemas = message.schemas.map((e) => CredentialSchema.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListCredentialSchemasResponse>, I>>(
    base?: I,
  ): QueryListCredentialSchemasResponse {
    return QueryListCredentialSchemasResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListCredentialSchemasResponse>, I>>(
    object: I,
  ): QueryListCredentialSchemasResponse {
    const message = createBaseQueryListCredentialSchemasResponse();
    message.schemas = object.schemas?.map((e) => CredentialSchema.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetCredentialSchemaRequest(): QueryGetCredentialSchemaRequest {
  return { id: Long.UZERO };
}

export const QueryGetCredentialSchemaRequest = {
  encode(message: QueryGetCredentialSchemaRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetCredentialSchemaRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetCredentialSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetCredentialSchemaRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetCredentialSchemaRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetCredentialSchemaRequest>, I>>(base?: I): QueryGetCredentialSchemaRequest {
    return QueryGetCredentialSchemaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetCredentialSchemaRequest>, I>>(
    object: I,
  ): QueryGetCredentialSchemaRequest {
    const message = createBaseQueryGetCredentialSchemaRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetCredentialSchemaResponse(): QueryGetCredentialSchemaResponse {
  return { schema: undefined };
}

export const QueryGetCredentialSchemaResponse = {
  encode(message: QueryGetCredentialSchemaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.schema !== undefined) {
      CredentialSchema.encode(message.schema, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetCredentialSchemaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetCredentialSchemaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schema = CredentialSchema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetCredentialSchemaResponse {
    return { schema: isSet(object.schema) ? CredentialSchema.fromJSON(object.schema) : undefined };
  },

  toJSON(message: QueryGetCredentialSchemaResponse): unknown {
    const obj: any = {};
    if (message.schema !== undefined) {
      obj.schema = CredentialSchema.toJSON(message.schema);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetCredentialSchemaResponse>, I>>(
    base?: I,
  ): QueryGetCredentialSchemaResponse {
    return QueryGetCredentialSchemaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetCredentialSchemaResponse>, I>>(
    object: I,
  ): QueryGetCredentialSchemaResponse {
    const message = createBaseQueryGetCredentialSchemaResponse();
    message.schema = (object.schema !== undefined && object.schema !== null)
      ? CredentialSchema.fromPartial(object.schema)
      : undefined;
    return message;
  },
};

function createBaseQueryRenderJsonSchemaRequest(): QueryRenderJsonSchemaRequest {
  return { id: Long.UZERO };
}

export const QueryRenderJsonSchemaRequest = {
  encode(message: QueryRenderJsonSchemaRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryRenderJsonSchemaRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRenderJsonSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRenderJsonSchemaRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryRenderJsonSchemaRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRenderJsonSchemaRequest>, I>>(base?: I): QueryRenderJsonSchemaRequest {
    return QueryRenderJsonSchemaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRenderJsonSchemaRequest>, I>>(object: I): QueryRenderJsonSchemaRequest {
    const message = createBaseQueryRenderJsonSchemaRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryRenderJsonSchemaResponse(): QueryRenderJsonSchemaResponse {
  return { schema: "" };
}

export const QueryRenderJsonSchemaResponse = {
  encode(message: QueryRenderJsonSchemaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.schema !== "") {
      writer.uint32(10).string(message.schema);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryRenderJsonSchemaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRenderJsonSchemaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schema = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRenderJsonSchemaResponse {
    return { schema: isSet(object.schema) ? globalThis.String(object.schema) : "" };
  },

  toJSON(message: QueryRenderJsonSchemaResponse): unknown {
    const obj: any = {};
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRenderJsonSchemaResponse>, I>>(base?: I): QueryRenderJsonSchemaResponse {
    return QueryRenderJsonSchemaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRenderJsonSchemaResponse>, I>>(
    object: I,
  ): QueryRenderJsonSchemaResponse {
    const message = createBaseQueryRenderJsonSchemaResponse();
    message.schema = object.schema ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ListCredentialSchemas queries a list of CredentialSchema items. */
  ListCredentialSchemas(request: QueryListCredentialSchemasRequest): Promise<QueryListCredentialSchemasResponse>;
  /** GetCredentialSchema returns a credential schema by ID */
  GetCredentialSchema(request: QueryGetCredentialSchemaRequest): Promise<QueryGetCredentialSchemaResponse>;
  /** RenderJsonSchema returns the JSON schema definition */
  RenderJsonSchema(request: QueryRenderJsonSchemaRequest): Promise<QueryRenderJsonSchemaResponse>;
}

export const QueryServiceName = "verana.cs.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.ListCredentialSchemas = this.ListCredentialSchemas.bind(this);
    this.GetCredentialSchema = this.GetCredentialSchema.bind(this);
    this.RenderJsonSchema = this.RenderJsonSchema.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  ListCredentialSchemas(request: QueryListCredentialSchemasRequest): Promise<QueryListCredentialSchemasResponse> {
    const data = QueryListCredentialSchemasRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListCredentialSchemas", data);
    return promise.then((data) => QueryListCredentialSchemasResponse.decode(_m0.Reader.create(data)));
  }

  GetCredentialSchema(request: QueryGetCredentialSchemaRequest): Promise<QueryGetCredentialSchemaResponse> {
    const data = QueryGetCredentialSchemaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCredentialSchema", data);
    return promise.then((data) => QueryGetCredentialSchemaResponse.decode(_m0.Reader.create(data)));
  }

  RenderJsonSchema(request: QueryRenderJsonSchemaRequest): Promise<QueryRenderJsonSchemaResponse> {
    const data = QueryRenderJsonSchemaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RenderJsonSchema", data);
    return promise.then((data) => QueryRenderJsonSchemaResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
