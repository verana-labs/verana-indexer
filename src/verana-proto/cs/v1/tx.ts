// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/cs/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";

export const protobufPackage = "verana.cs.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateCredentialSchema {
  creator: string;
  trId: Long;
  jsonSchema: string;
  issuerGrantorValidationValidityPeriod: number;
  verifierGrantorValidationValidityPeriod: number;
  issuerValidationValidityPeriod: number;
  verifierValidationValidityPeriod: number;
  holderValidationValidityPeriod: number;
  issuerPermManagementMode: number;
  verifierPermManagementMode: number;
}

export interface MsgCreateCredentialSchemaResponse {
  /** ID of the created credential schema for confirmation */
  id: Long;
}

export interface MsgUpdateCredentialSchema {
  creator: string;
  id: Long;
  issuerGrantorValidationValidityPeriod: number;
  verifierGrantorValidationValidityPeriod: number;
  issuerValidationValidityPeriod: number;
  verifierValidationValidityPeriod: number;
  holderValidationValidityPeriod: number;
}

export interface MsgUpdateCredentialSchemaResponse {
}

export interface MsgArchiveCredentialSchema {
  creator: string;
  id: Long;
  archive: boolean;
}

export interface MsgArchiveCredentialSchemaResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateCredentialSchema(): MsgCreateCredentialSchema {
  return {
    creator: "",
    trId: Long.UZERO,
    jsonSchema: "",
    issuerGrantorValidationValidityPeriod: 0,
    verifierGrantorValidationValidityPeriod: 0,
    issuerValidationValidityPeriod: 0,
    verifierValidationValidityPeriod: 0,
    holderValidationValidityPeriod: 0,
    issuerPermManagementMode: 0,
    verifierPermManagementMode: 0,
  };
}

export const MsgCreateCredentialSchema = {
  encode(message: MsgCreateCredentialSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.trId);
    }
    if (message.jsonSchema !== "") {
      writer.uint32(26).string(message.jsonSchema);
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      writer.uint32(32).uint32(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      writer.uint32(40).uint32(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      writer.uint32(48).uint32(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      writer.uint32(56).uint32(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      writer.uint32(64).uint32(message.holderValidationValidityPeriod);
    }
    if (message.issuerPermManagementMode !== 0) {
      writer.uint32(72).uint32(message.issuerPermManagementMode);
    }
    if (message.verifierPermManagementMode !== 0) {
      writer.uint32(80).uint32(message.verifierPermManagementMode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateCredentialSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCredentialSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jsonSchema = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.issuerGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.verifierGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.issuerValidationValidityPeriod = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.verifierValidationValidityPeriod = reader.uint32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.holderValidationValidityPeriod = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.issuerPermManagementMode = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.verifierPermManagementMode = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateCredentialSchema {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      jsonSchema: isSet(object.jsonSchema) ? globalThis.String(object.jsonSchema) : "",
      issuerGrantorValidationValidityPeriod: isSet(object.issuerGrantorValidationValidityPeriod)
        ? globalThis.Number(object.issuerGrantorValidationValidityPeriod)
        : 0,
      verifierGrantorValidationValidityPeriod: isSet(object.verifierGrantorValidationValidityPeriod)
        ? globalThis.Number(object.verifierGrantorValidationValidityPeriod)
        : 0,
      issuerValidationValidityPeriod: isSet(object.issuerValidationValidityPeriod)
        ? globalThis.Number(object.issuerValidationValidityPeriod)
        : 0,
      verifierValidationValidityPeriod: isSet(object.verifierValidationValidityPeriod)
        ? globalThis.Number(object.verifierValidationValidityPeriod)
        : 0,
      holderValidationValidityPeriod: isSet(object.holderValidationValidityPeriod)
        ? globalThis.Number(object.holderValidationValidityPeriod)
        : 0,
      issuerPermManagementMode: isSet(object.issuerPermManagementMode)
        ? globalThis.Number(object.issuerPermManagementMode)
        : 0,
      verifierPermManagementMode: isSet(object.verifierPermManagementMode)
        ? globalThis.Number(object.verifierPermManagementMode)
        : 0,
    };
  },

  toJSON(message: MsgCreateCredentialSchema): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.jsonSchema !== "") {
      obj.jsonSchema = message.jsonSchema;
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      obj.issuerGrantorValidationValidityPeriod = Math.round(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      obj.verifierGrantorValidationValidityPeriod = Math.round(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      obj.issuerValidationValidityPeriod = Math.round(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      obj.verifierValidationValidityPeriod = Math.round(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      obj.holderValidationValidityPeriod = Math.round(message.holderValidationValidityPeriod);
    }
    if (message.issuerPermManagementMode !== 0) {
      obj.issuerPermManagementMode = Math.round(message.issuerPermManagementMode);
    }
    if (message.verifierPermManagementMode !== 0) {
      obj.verifierPermManagementMode = Math.round(message.verifierPermManagementMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateCredentialSchema>, I>>(base?: I): MsgCreateCredentialSchema {
    return MsgCreateCredentialSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateCredentialSchema>, I>>(object: I): MsgCreateCredentialSchema {
    const message = createBaseMsgCreateCredentialSchema();
    message.creator = object.creator ?? "";
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.jsonSchema = object.jsonSchema ?? "";
    message.issuerGrantorValidationValidityPeriod = object.issuerGrantorValidationValidityPeriod ?? 0;
    message.verifierGrantorValidationValidityPeriod = object.verifierGrantorValidationValidityPeriod ?? 0;
    message.issuerValidationValidityPeriod = object.issuerValidationValidityPeriod ?? 0;
    message.verifierValidationValidityPeriod = object.verifierValidationValidityPeriod ?? 0;
    message.holderValidationValidityPeriod = object.holderValidationValidityPeriod ?? 0;
    message.issuerPermManagementMode = object.issuerPermManagementMode ?? 0;
    message.verifierPermManagementMode = object.verifierPermManagementMode ?? 0;
    return message;
  },
};

function createBaseMsgCreateCredentialSchemaResponse(): MsgCreateCredentialSchemaResponse {
  return { id: Long.UZERO };
}

export const MsgCreateCredentialSchemaResponse = {
  encode(message: MsgCreateCredentialSchemaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateCredentialSchemaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCredentialSchemaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateCredentialSchemaResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateCredentialSchemaResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateCredentialSchemaResponse>, I>>(
    base?: I,
  ): MsgCreateCredentialSchemaResponse {
    return MsgCreateCredentialSchemaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateCredentialSchemaResponse>, I>>(
    object: I,
  ): MsgCreateCredentialSchemaResponse {
    const message = createBaseMsgCreateCredentialSchemaResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateCredentialSchema(): MsgUpdateCredentialSchema {
  return {
    creator: "",
    id: Long.UZERO,
    issuerGrantorValidationValidityPeriod: 0,
    verifierGrantorValidationValidityPeriod: 0,
    issuerValidationValidityPeriod: 0,
    verifierValidationValidityPeriod: 0,
    holderValidationValidityPeriod: 0,
  };
}

export const MsgUpdateCredentialSchema = {
  encode(message: MsgUpdateCredentialSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      writer.uint32(24).uint32(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      writer.uint32(32).uint32(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      writer.uint32(40).uint32(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      writer.uint32(48).uint32(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      writer.uint32(56).uint32(message.holderValidationValidityPeriod);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateCredentialSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateCredentialSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.issuerGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.verifierGrantorValidationValidityPeriod = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.issuerValidationValidityPeriod = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.verifierValidationValidityPeriod = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.holderValidationValidityPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateCredentialSchema {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      issuerGrantorValidationValidityPeriod: isSet(object.issuerGrantorValidationValidityPeriod)
        ? globalThis.Number(object.issuerGrantorValidationValidityPeriod)
        : 0,
      verifierGrantorValidationValidityPeriod: isSet(object.verifierGrantorValidationValidityPeriod)
        ? globalThis.Number(object.verifierGrantorValidationValidityPeriod)
        : 0,
      issuerValidationValidityPeriod: isSet(object.issuerValidationValidityPeriod)
        ? globalThis.Number(object.issuerValidationValidityPeriod)
        : 0,
      verifierValidationValidityPeriod: isSet(object.verifierValidationValidityPeriod)
        ? globalThis.Number(object.verifierValidationValidityPeriod)
        : 0,
      holderValidationValidityPeriod: isSet(object.holderValidationValidityPeriod)
        ? globalThis.Number(object.holderValidationValidityPeriod)
        : 0,
    };
  },

  toJSON(message: MsgUpdateCredentialSchema): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.issuerGrantorValidationValidityPeriod !== 0) {
      obj.issuerGrantorValidationValidityPeriod = Math.round(message.issuerGrantorValidationValidityPeriod);
    }
    if (message.verifierGrantorValidationValidityPeriod !== 0) {
      obj.verifierGrantorValidationValidityPeriod = Math.round(message.verifierGrantorValidationValidityPeriod);
    }
    if (message.issuerValidationValidityPeriod !== 0) {
      obj.issuerValidationValidityPeriod = Math.round(message.issuerValidationValidityPeriod);
    }
    if (message.verifierValidationValidityPeriod !== 0) {
      obj.verifierValidationValidityPeriod = Math.round(message.verifierValidationValidityPeriod);
    }
    if (message.holderValidationValidityPeriod !== 0) {
      obj.holderValidationValidityPeriod = Math.round(message.holderValidationValidityPeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateCredentialSchema>, I>>(base?: I): MsgUpdateCredentialSchema {
    return MsgUpdateCredentialSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateCredentialSchema>, I>>(object: I): MsgUpdateCredentialSchema {
    const message = createBaseMsgUpdateCredentialSchema();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.issuerGrantorValidationValidityPeriod = object.issuerGrantorValidationValidityPeriod ?? 0;
    message.verifierGrantorValidationValidityPeriod = object.verifierGrantorValidationValidityPeriod ?? 0;
    message.issuerValidationValidityPeriod = object.issuerValidationValidityPeriod ?? 0;
    message.verifierValidationValidityPeriod = object.verifierValidationValidityPeriod ?? 0;
    message.holderValidationValidityPeriod = object.holderValidationValidityPeriod ?? 0;
    return message;
  },
};

function createBaseMsgUpdateCredentialSchemaResponse(): MsgUpdateCredentialSchemaResponse {
  return {};
}

export const MsgUpdateCredentialSchemaResponse = {
  encode(_: MsgUpdateCredentialSchemaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateCredentialSchemaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateCredentialSchemaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateCredentialSchemaResponse {
    return {};
  },

  toJSON(_: MsgUpdateCredentialSchemaResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateCredentialSchemaResponse>, I>>(
    base?: I,
  ): MsgUpdateCredentialSchemaResponse {
    return MsgUpdateCredentialSchemaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateCredentialSchemaResponse>, I>>(
    _: I,
  ): MsgUpdateCredentialSchemaResponse {
    const message = createBaseMsgUpdateCredentialSchemaResponse();
    return message;
  },
};

function createBaseMsgArchiveCredentialSchema(): MsgArchiveCredentialSchema {
  return { creator: "", id: Long.UZERO, archive: false };
}

export const MsgArchiveCredentialSchema = {
  encode(message: MsgArchiveCredentialSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.archive !== false) {
      writer.uint32(24).bool(message.archive);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgArchiveCredentialSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgArchiveCredentialSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.archive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgArchiveCredentialSchema {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      archive: isSet(object.archive) ? globalThis.Boolean(object.archive) : false,
    };
  },

  toJSON(message: MsgArchiveCredentialSchema): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.archive !== false) {
      obj.archive = message.archive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgArchiveCredentialSchema>, I>>(base?: I): MsgArchiveCredentialSchema {
    return MsgArchiveCredentialSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgArchiveCredentialSchema>, I>>(object: I): MsgArchiveCredentialSchema {
    const message = createBaseMsgArchiveCredentialSchema();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.archive = object.archive ?? false;
    return message;
  },
};

function createBaseMsgArchiveCredentialSchemaResponse(): MsgArchiveCredentialSchemaResponse {
  return {};
}

export const MsgArchiveCredentialSchemaResponse = {
  encode(_: MsgArchiveCredentialSchemaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgArchiveCredentialSchemaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgArchiveCredentialSchemaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgArchiveCredentialSchemaResponse {
    return {};
  },

  toJSON(_: MsgArchiveCredentialSchemaResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgArchiveCredentialSchemaResponse>, I>>(
    base?: I,
  ): MsgArchiveCredentialSchemaResponse {
    return MsgArchiveCredentialSchemaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgArchiveCredentialSchemaResponse>, I>>(
    _: I,
  ): MsgArchiveCredentialSchemaResponse {
    const message = createBaseMsgArchiveCredentialSchemaResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateCredentialSchema defines a method for creating a new credential schema. */
  CreateCredentialSchema(request: MsgCreateCredentialSchema): Promise<MsgCreateCredentialSchemaResponse>;
  /** UpdateCredentialSchema defines a method for updating a credential schema. */
  UpdateCredentialSchema(request: MsgUpdateCredentialSchema): Promise<MsgUpdateCredentialSchemaResponse>;
  /** ArchiveCredentialSchema defines a method for archiving a credential schema. */
  ArchiveCredentialSchema(request: MsgArchiveCredentialSchema): Promise<MsgArchiveCredentialSchemaResponse>;
}

export const MsgServiceName = "verana.cs.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateCredentialSchema = this.CreateCredentialSchema.bind(this);
    this.UpdateCredentialSchema = this.UpdateCredentialSchema.bind(this);
    this.ArchiveCredentialSchema = this.ArchiveCredentialSchema.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }

  CreateCredentialSchema(request: MsgCreateCredentialSchema): Promise<MsgCreateCredentialSchemaResponse> {
    const data = MsgCreateCredentialSchema.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCredentialSchema", data);
    return promise.then((data) => MsgCreateCredentialSchemaResponse.decode(_m0.Reader.create(data)));
  }

  UpdateCredentialSchema(request: MsgUpdateCredentialSchema): Promise<MsgUpdateCredentialSchemaResponse> {
    const data = MsgUpdateCredentialSchema.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCredentialSchema", data);
    return promise.then((data) => MsgUpdateCredentialSchemaResponse.decode(_m0.Reader.create(data)));
  }

  ArchiveCredentialSchema(request: MsgArchiveCredentialSchema): Promise<MsgArchiveCredentialSchemaResponse> {
    const data = MsgArchiveCredentialSchema.encode(request).finish();
    const promise = this.rpc.request(this.service, "ArchiveCredentialSchema", data);
    return promise.then((data) => MsgArchiveCredentialSchemaResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
