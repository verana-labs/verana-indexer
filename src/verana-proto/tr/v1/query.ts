// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/tr/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";
import { Params } from "./params";
import { TrustRegistryWithVersions } from "./types";

export const protobufPackage = "verana.tr.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryGetTrustRegistryRequest is the request type for the Query/GetTrustRegistry RPC method. */
export interface QueryGetTrustRegistryRequest {
  /** Changed from string did to uint64 tr_id */
  trId: Long;
  activeGfOnly: boolean;
  preferredLanguage: string;
}

/** QueryGetTrustRegistryResponse is the response type for the Query/GetTrustRegistry RPC method. */
export interface QueryGetTrustRegistryResponse {
  trustRegistry?: TrustRegistryWithVersions | undefined;
}

/** QueryListTrustRegistriesRequest is the request type for the Query/ListTrustRegistries RPC method. */
export interface QueryListTrustRegistriesRequest {
  /** Added controller field */
  controller: string;
  modifiedAfter?: Date | undefined;
  activeGfOnly: boolean;
  preferredLanguage: string;
  responseMaxSize: number;
}

/** QueryListTrustRegistriesResponse is the response type for the Query/ListTrustRegistries RPC method. */
export interface QueryListTrustRegistriesResponse {
  trustRegistries: TrustRegistryWithVersions[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetTrustRegistryRequest(): QueryGetTrustRegistryRequest {
  return { trId: Long.UZERO, activeGfOnly: false, preferredLanguage: "" };
}

export const QueryGetTrustRegistryRequest = {
  encode(message: QueryGetTrustRegistryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.trId);
    }
    if (message.activeGfOnly !== false) {
      writer.uint32(16).bool(message.activeGfOnly);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(26).string(message.preferredLanguage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetTrustRegistryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTrustRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.activeGfOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTrustRegistryRequest {
    return {
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      activeGfOnly: isSet(object.activeGfOnly) ? globalThis.Boolean(object.activeGfOnly) : false,
      preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
    };
  },

  toJSON(message: QueryGetTrustRegistryRequest): unknown {
    const obj: any = {};
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.activeGfOnly !== false) {
      obj.activeGfOnly = message.activeGfOnly;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTrustRegistryRequest>, I>>(base?: I): QueryGetTrustRegistryRequest {
    return QueryGetTrustRegistryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTrustRegistryRequest>, I>>(object: I): QueryGetTrustRegistryRequest {
    const message = createBaseQueryGetTrustRegistryRequest();
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.activeGfOnly = object.activeGfOnly ?? false;
    message.preferredLanguage = object.preferredLanguage ?? "";
    return message;
  },
};

function createBaseQueryGetTrustRegistryResponse(): QueryGetTrustRegistryResponse {
  return { trustRegistry: undefined };
}

export const QueryGetTrustRegistryResponse = {
  encode(message: QueryGetTrustRegistryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.trustRegistry !== undefined) {
      TrustRegistryWithVersions.encode(message.trustRegistry, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetTrustRegistryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTrustRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trustRegistry = TrustRegistryWithVersions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTrustRegistryResponse {
    return {
      trustRegistry: isSet(object.trustRegistry) ? TrustRegistryWithVersions.fromJSON(object.trustRegistry) : undefined,
    };
  },

  toJSON(message: QueryGetTrustRegistryResponse): unknown {
    const obj: any = {};
    if (message.trustRegistry !== undefined) {
      obj.trustRegistry = TrustRegistryWithVersions.toJSON(message.trustRegistry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTrustRegistryResponse>, I>>(base?: I): QueryGetTrustRegistryResponse {
    return QueryGetTrustRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTrustRegistryResponse>, I>>(
    object: I,
  ): QueryGetTrustRegistryResponse {
    const message = createBaseQueryGetTrustRegistryResponse();
    message.trustRegistry = (object.trustRegistry !== undefined && object.trustRegistry !== null)
      ? TrustRegistryWithVersions.fromPartial(object.trustRegistry)
      : undefined;
    return message;
  },
};

function createBaseQueryListTrustRegistriesRequest(): QueryListTrustRegistriesRequest {
  return { controller: "", modifiedAfter: undefined, activeGfOnly: false, preferredLanguage: "", responseMaxSize: 0 };
}

export const QueryListTrustRegistriesRequest = {
  encode(message: QueryListTrustRegistriesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.controller !== "") {
      writer.uint32(10).string(message.controller);
    }
    if (message.modifiedAfter !== undefined) {
      Timestamp.encode(toTimestamp(message.modifiedAfter), writer.uint32(18).fork()).ldelim();
    }
    if (message.activeGfOnly !== false) {
      writer.uint32(24).bool(message.activeGfOnly);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(34).string(message.preferredLanguage);
    }
    if (message.responseMaxSize !== 0) {
      writer.uint32(40).uint32(message.responseMaxSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListTrustRegistriesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListTrustRegistriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.controller = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modifiedAfter = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.activeGfOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseMaxSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListTrustRegistriesRequest {
    return {
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      modifiedAfter: isSet(object.modifiedAfter) ? fromJsonTimestamp(object.modifiedAfter) : undefined,
      activeGfOnly: isSet(object.activeGfOnly) ? globalThis.Boolean(object.activeGfOnly) : false,
      preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
      responseMaxSize: isSet(object.responseMaxSize) ? globalThis.Number(object.responseMaxSize) : 0,
    };
  },

  toJSON(message: QueryListTrustRegistriesRequest): unknown {
    const obj: any = {};
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.modifiedAfter !== undefined) {
      obj.modifiedAfter = message.modifiedAfter.toISOString();
    }
    if (message.activeGfOnly !== false) {
      obj.activeGfOnly = message.activeGfOnly;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.responseMaxSize !== 0) {
      obj.responseMaxSize = Math.round(message.responseMaxSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListTrustRegistriesRequest>, I>>(base?: I): QueryListTrustRegistriesRequest {
    return QueryListTrustRegistriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListTrustRegistriesRequest>, I>>(
    object: I,
  ): QueryListTrustRegistriesRequest {
    const message = createBaseQueryListTrustRegistriesRequest();
    message.controller = object.controller ?? "";
    message.modifiedAfter = object.modifiedAfter ?? undefined;
    message.activeGfOnly = object.activeGfOnly ?? false;
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.responseMaxSize = object.responseMaxSize ?? 0;
    return message;
  },
};

function createBaseQueryListTrustRegistriesResponse(): QueryListTrustRegistriesResponse {
  return { trustRegistries: [] };
}

export const QueryListTrustRegistriesResponse = {
  encode(message: QueryListTrustRegistriesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.trustRegistries) {
      TrustRegistryWithVersions.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryListTrustRegistriesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListTrustRegistriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trustRegistries.push(TrustRegistryWithVersions.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListTrustRegistriesResponse {
    return {
      trustRegistries: globalThis.Array.isArray(object?.trustRegistries)
        ? object.trustRegistries.map((e: any) => TrustRegistryWithVersions.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryListTrustRegistriesResponse): unknown {
    const obj: any = {};
    if (message.trustRegistries?.length) {
      obj.trustRegistries = message.trustRegistries.map((e) => TrustRegistryWithVersions.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListTrustRegistriesResponse>, I>>(
    base?: I,
  ): QueryListTrustRegistriesResponse {
    return QueryListTrustRegistriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListTrustRegistriesResponse>, I>>(
    object: I,
  ): QueryListTrustRegistriesResponse {
    const message = createBaseQueryListTrustRegistriesResponse();
    message.trustRegistries = object.trustRegistries?.map((e) => TrustRegistryWithVersions.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** GetTrustRegistry returns the trust registry information. */
  GetTrustRegistry(request: QueryGetTrustRegistryRequest): Promise<QueryGetTrustRegistryResponse>;
  /** ListTrustRegistries returns a list of Trust Registries */
  ListTrustRegistries(request: QueryListTrustRegistriesRequest): Promise<QueryListTrustRegistriesResponse>;
}

export const QueryServiceName = "verana.tr.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetTrustRegistry = this.GetTrustRegistry.bind(this);
    this.ListTrustRegistries = this.ListTrustRegistries.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  GetTrustRegistry(request: QueryGetTrustRegistryRequest): Promise<QueryGetTrustRegistryResponse> {
    const data = QueryGetTrustRegistryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTrustRegistry", data);
    return promise.then((data) => QueryGetTrustRegistryResponse.decode(_m0.Reader.create(data)));
  }

  ListTrustRegistries(request: QueryListTrustRegistriesRequest): Promise<QueryListTrustRegistriesResponse> {
    const data = QueryListTrustRegistriesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListTrustRegistries", data);
    return promise.then((data) => QueryListTrustRegistriesResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
