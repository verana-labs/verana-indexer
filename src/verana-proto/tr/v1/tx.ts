// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/tr/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";

export const protobufPackage = "verana.tr.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgCreateTrustRegistry defines the Msg/CreateTrustRegistry request type. */
export interface MsgCreateTrustRegistry {
  creator: string;
  did: string;
  aka: string;
  language: string;
  docUrl: string;
  docDigestSri: string;
}

/** MsgCreateTrustRegistryResponse defines the Msg/CreateTrustRegistry response type. */
export interface MsgCreateTrustRegistryResponse {
}

/** MsgAddGovernanceFrameworkDocument defines the Msg/AddGovernanceFrameworkDocument request type. */
export interface MsgAddGovernanceFrameworkDocument {
  creator: string;
  // id: string;
  // id: number;
  id: Long;
  docLanguage: string;
  docUrl: string;
  docDigestSri: string;
  version: number;
}

/** MsgAddGovernanceFrameworkDocumentResponse defines the Msg/AddGovernanceFrameworkDocument response type. */
export interface MsgAddGovernanceFrameworkDocumentResponse {
}

/** MsgIncreaseActiveGovernanceFrameworkVersion defines the Msg/IncreaseActiveGovernanceFrameworkVersion request type. */
export interface MsgIncreaseActiveGovernanceFrameworkVersion {
  creator: string;
  /** Changed from tr_id to id */
  id: Long;
}

/** MsgIncreaseActiveGovernanceFrameworkVersion defines the Msg/IncreaseActiveGovernanceFrameworkVersion response type. */
export interface MsgIncreaseActiveGovernanceFrameworkVersionResponse {
}

/** MsgUpdateTrustRegistry defines the Msg/UpdateTrustRegistry request type. */
export interface MsgUpdateTrustRegistry {
  creator: string;
  id: Long;
  did: string;
  aka: string;
}

/** MsgUpdateTrustRegistryResponse defines the Msg/UpdateTrustRegistry response type. */
export interface MsgUpdateTrustRegistryResponse {
}

/** MsgArchiveTrustRegistry defines the Msg/ArchiveTrustRegistry request type. */
export interface MsgArchiveTrustRegistry {
  creator: string;
  id: Long;
  archive: boolean;
}

/** MsgArchiveTrustRegistryResponse defines the Msg/ArchiveTrustRegistry response type. */
export interface MsgArchiveTrustRegistryResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateTrustRegistry(): MsgCreateTrustRegistry {
  return { creator: "", did: "", aka: "", language: "", docUrl: "", docDigestSri: "" };
}

export const MsgCreateTrustRegistry = {
  encode(message: MsgCreateTrustRegistry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.aka !== "") {
      writer.uint32(26).string(message.aka);
    }
    if (message.language !== "") {
      writer.uint32(34).string(message.language);
    }
    if (message.docUrl !== "") {
      writer.uint32(42).string(message.docUrl);
    }
    if (message.docDigestSri !== "") {
      writer.uint32(50).string(message.docDigestSri);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTrustRegistry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTrustRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.aka = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.language = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.docUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.docDigestSri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTrustRegistry {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      aka: isSet(object.aka) ? globalThis.String(object.aka) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      docUrl: isSet(object.docUrl) ? globalThis.String(object.docUrl) : "",
      docDigestSri: isSet(object.docDigestSri) ? globalThis.String(object.docDigestSri) : "",
    };
  },

  toJSON(message: MsgCreateTrustRegistry): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.aka !== "") {
      obj.aka = message.aka;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.docUrl !== "") {
      obj.docUrl = message.docUrl;
    }
    if (message.docDigestSri !== "") {
      obj.docDigestSri = message.docDigestSri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTrustRegistry>, I>>(base?: I): MsgCreateTrustRegistry {
    return MsgCreateTrustRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTrustRegistry>, I>>(object: I): MsgCreateTrustRegistry {
    const message = createBaseMsgCreateTrustRegistry();
    message.creator = object.creator ?? "";
    message.did = object.did ?? "";
    message.aka = object.aka ?? "";
    message.language = object.language ?? "";
    message.docUrl = object.docUrl ?? "";
    message.docDigestSri = object.docDigestSri ?? "";
    return message;
  },
};

function createBaseMsgCreateTrustRegistryResponse(): MsgCreateTrustRegistryResponse {
  return {};
}

export const MsgCreateTrustRegistryResponse = {
  encode(_: MsgCreateTrustRegistryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTrustRegistryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTrustRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateTrustRegistryResponse {
    return {};
  },

  toJSON(_: MsgCreateTrustRegistryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTrustRegistryResponse>, I>>(base?: I): MsgCreateTrustRegistryResponse {
    return MsgCreateTrustRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTrustRegistryResponse>, I>>(_: I): MsgCreateTrustRegistryResponse {
    const message = createBaseMsgCreateTrustRegistryResponse();
    return message;
  },
};

function createBaseMsgAddGovernanceFrameworkDocument(): MsgAddGovernanceFrameworkDocument {
  // return { creator: "", id: "", docLanguage: "", docUrl: "", docDigestSri: "", version: 0 };
  // return { creator: "", id: 0, docLanguage: "", docUrl: "", docDigestSri: "", version: 0 };
  return { creator: "", id: Long.UZERO, docLanguage: "", docUrl: "", docDigestSri: "", version: 0 };
}

export const MsgAddGovernanceFrameworkDocument = {
  encode(message: MsgAddGovernanceFrameworkDocument, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    // if (message.id !== "") {
    //   writer.uint32(18).string(message.id);
    // }
    // if (message.id !== 0) {
    //   writer.uint32(16).uint32(message.id);
    // }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);      
    }
    if (message.docLanguage !== "") {
      writer.uint32(26).string(message.docLanguage);
    }
    if (message.docUrl !== "") {
      writer.uint32(34).string(message.docUrl);
    }
    if (message.docDigestSri !== "") {
      writer.uint32(42).string(message.docDigestSri);
    }
    if (message.version !== 0) {
      writer.uint32(48).int32(message.version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddGovernanceFrameworkDocument {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddGovernanceFrameworkDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          // if (tag !== 18) {
          // if (tag !== 24) {
          if (tag !== 16) {
            break;
          }

          // message.id = reader.string();
          // message.id = reader.uint32();
          message.id = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.docLanguage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.docUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.docDigestSri = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.version = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddGovernanceFrameworkDocument {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      // id: isSet(object.id) ? globalThis.String(object.id) : "",
      // id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      docLanguage: isSet(object.docLanguage) ? globalThis.String(object.docLanguage) : "",
      docUrl: isSet(object.docUrl) ? globalThis.String(object.docUrl) : "",
      docDigestSri: isSet(object.docDigestSri) ? globalThis.String(object.docDigestSri) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: MsgAddGovernanceFrameworkDocument): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    // if (message.id !== "") {
    //   obj.id = message.id;
    // }
    // if (message.id !== 0) {
    //   obj.id = Math.round(message.id);
    // }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.docLanguage !== "") {
      obj.docLanguage = message.docLanguage;
    }
    if (message.docUrl !== "") {
      obj.docUrl = message.docUrl;
    }
    if (message.docDigestSri !== "") {
      obj.docDigestSri = message.docDigestSri;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddGovernanceFrameworkDocument>, I>>(
    base?: I,
  ): MsgAddGovernanceFrameworkDocument {
    return MsgAddGovernanceFrameworkDocument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddGovernanceFrameworkDocument>, I>>(
    object: I,
  ): MsgAddGovernanceFrameworkDocument {
    const message = createBaseMsgAddGovernanceFrameworkDocument();
    message.creator = object.creator ?? "";
    // message.id = object.id ?? "";
    // message.id = object.id ?? 0;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.docLanguage = object.docLanguage ?? "";
    message.docUrl = object.docUrl ?? "";
    message.docDigestSri = object.docDigestSri ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseMsgAddGovernanceFrameworkDocumentResponse(): MsgAddGovernanceFrameworkDocumentResponse {
  return {};
}

export const MsgAddGovernanceFrameworkDocumentResponse = {
  encode(_: MsgAddGovernanceFrameworkDocumentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddGovernanceFrameworkDocumentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddGovernanceFrameworkDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddGovernanceFrameworkDocumentResponse {
    return {};
  },

  toJSON(_: MsgAddGovernanceFrameworkDocumentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddGovernanceFrameworkDocumentResponse>, I>>(
    base?: I,
  ): MsgAddGovernanceFrameworkDocumentResponse {
    return MsgAddGovernanceFrameworkDocumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddGovernanceFrameworkDocumentResponse>, I>>(
    _: I,
  ): MsgAddGovernanceFrameworkDocumentResponse {
    const message = createBaseMsgAddGovernanceFrameworkDocumentResponse();
    return message;
  },
};

function createBaseMsgIncreaseActiveGovernanceFrameworkVersion(): MsgIncreaseActiveGovernanceFrameworkVersion {
  return { creator: "", id: Long.UZERO };
}

export const MsgIncreaseActiveGovernanceFrameworkVersion = {
  encode(message: MsgIncreaseActiveGovernanceFrameworkVersion, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgIncreaseActiveGovernanceFrameworkVersion {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseActiveGovernanceFrameworkVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIncreaseActiveGovernanceFrameworkVersion {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
    };
  },

  toJSON(message: MsgIncreaseActiveGovernanceFrameworkVersion): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgIncreaseActiveGovernanceFrameworkVersion>, I>>(
    base?: I,
  ): MsgIncreaseActiveGovernanceFrameworkVersion {
    return MsgIncreaseActiveGovernanceFrameworkVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgIncreaseActiveGovernanceFrameworkVersion>, I>>(
    object: I,
  ): MsgIncreaseActiveGovernanceFrameworkVersion {
    const message = createBaseMsgIncreaseActiveGovernanceFrameworkVersion();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgIncreaseActiveGovernanceFrameworkVersionResponse(): MsgIncreaseActiveGovernanceFrameworkVersionResponse {
  return {};
}

export const MsgIncreaseActiveGovernanceFrameworkVersionResponse = {
  encode(_: MsgIncreaseActiveGovernanceFrameworkVersionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgIncreaseActiveGovernanceFrameworkVersionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseActiveGovernanceFrameworkVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgIncreaseActiveGovernanceFrameworkVersionResponse {
    return {};
  },

  toJSON(_: MsgIncreaseActiveGovernanceFrameworkVersionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgIncreaseActiveGovernanceFrameworkVersionResponse>, I>>(
    base?: I,
  ): MsgIncreaseActiveGovernanceFrameworkVersionResponse {
    return MsgIncreaseActiveGovernanceFrameworkVersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgIncreaseActiveGovernanceFrameworkVersionResponse>, I>>(
    _: I,
  ): MsgIncreaseActiveGovernanceFrameworkVersionResponse {
    const message = createBaseMsgIncreaseActiveGovernanceFrameworkVersionResponse();
    return message;
  },
};

function createBaseMsgUpdateTrustRegistry(): MsgUpdateTrustRegistry {
  return { creator: "", id: Long.UZERO, did: "", aka: "" };
}

export const MsgUpdateTrustRegistry = {
  encode(message: MsgUpdateTrustRegistry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.did !== "") {
      writer.uint32(26).string(message.did);
    }
    if (message.aka !== "") {
      writer.uint32(34).string(message.aka);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateTrustRegistry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTrustRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.did = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.aka = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateTrustRegistry {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      aka: isSet(object.aka) ? globalThis.String(object.aka) : "",
    };
  },

  toJSON(message: MsgUpdateTrustRegistry): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.aka !== "") {
      obj.aka = message.aka;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateTrustRegistry>, I>>(base?: I): MsgUpdateTrustRegistry {
    return MsgUpdateTrustRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateTrustRegistry>, I>>(object: I): MsgUpdateTrustRegistry {
    const message = createBaseMsgUpdateTrustRegistry();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.did = object.did ?? "";
    message.aka = object.aka ?? "";
    return message;
  },
};

function createBaseMsgUpdateTrustRegistryResponse(): MsgUpdateTrustRegistryResponse {
  return {};
}

export const MsgUpdateTrustRegistryResponse = {
  encode(_: MsgUpdateTrustRegistryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateTrustRegistryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTrustRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateTrustRegistryResponse {
    return {};
  },

  toJSON(_: MsgUpdateTrustRegistryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateTrustRegistryResponse>, I>>(base?: I): MsgUpdateTrustRegistryResponse {
    return MsgUpdateTrustRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateTrustRegistryResponse>, I>>(_: I): MsgUpdateTrustRegistryResponse {
    const message = createBaseMsgUpdateTrustRegistryResponse();
    return message;
  },
};

function createBaseMsgArchiveTrustRegistry(): MsgArchiveTrustRegistry {
  return { creator: "", id: Long.UZERO, archive: false };
}

export const MsgArchiveTrustRegistry = {
  encode(message: MsgArchiveTrustRegistry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.archive !== false) {
      writer.uint32(24).bool(message.archive);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgArchiveTrustRegistry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgArchiveTrustRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.archive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgArchiveTrustRegistry {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      archive: isSet(object.archive) ? globalThis.Boolean(object.archive) : false,
    };
  },

  toJSON(message: MsgArchiveTrustRegistry): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.archive !== false) {
      obj.archive = message.archive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgArchiveTrustRegistry>, I>>(base?: I): MsgArchiveTrustRegistry {
    return MsgArchiveTrustRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgArchiveTrustRegistry>, I>>(object: I): MsgArchiveTrustRegistry {
    const message = createBaseMsgArchiveTrustRegistry();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.archive = object.archive ?? false;
    return message;
  },
};

function createBaseMsgArchiveTrustRegistryResponse(): MsgArchiveTrustRegistryResponse {
  return {};
}

export const MsgArchiveTrustRegistryResponse = {
  encode(_: MsgArchiveTrustRegistryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgArchiveTrustRegistryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgArchiveTrustRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgArchiveTrustRegistryResponse {
    return {};
  },

  toJSON(_: MsgArchiveTrustRegistryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgArchiveTrustRegistryResponse>, I>>(base?: I): MsgArchiveTrustRegistryResponse {
    return MsgArchiveTrustRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgArchiveTrustRegistryResponse>, I>>(_: I): MsgArchiveTrustRegistryResponse {
    const message = createBaseMsgArchiveTrustRegistryResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateTrustRegistry creates a new trust registry. */
  CreateTrustRegistry(request: MsgCreateTrustRegistry): Promise<MsgCreateTrustRegistryResponse>;
  AddGovernanceFrameworkDocument(
    request: MsgAddGovernanceFrameworkDocument,
  ): Promise<MsgAddGovernanceFrameworkDocumentResponse>;
  IncreaseActiveGovernanceFrameworkVersion(
    request: MsgIncreaseActiveGovernanceFrameworkVersion,
  ): Promise<MsgIncreaseActiveGovernanceFrameworkVersionResponse>;
  UpdateTrustRegistry(request: MsgUpdateTrustRegistry): Promise<MsgUpdateTrustRegistryResponse>;
  ArchiveTrustRegistry(request: MsgArchiveTrustRegistry): Promise<MsgArchiveTrustRegistryResponse>;
}

export const MsgServiceName = "verana.tr.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateTrustRegistry = this.CreateTrustRegistry.bind(this);
    this.AddGovernanceFrameworkDocument = this.AddGovernanceFrameworkDocument.bind(this);
    this.IncreaseActiveGovernanceFrameworkVersion = this.IncreaseActiveGovernanceFrameworkVersion.bind(this);
    this.UpdateTrustRegistry = this.UpdateTrustRegistry.bind(this);
    this.ArchiveTrustRegistry = this.ArchiveTrustRegistry.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }

  CreateTrustRegistry(request: MsgCreateTrustRegistry): Promise<MsgCreateTrustRegistryResponse> {
    const data = MsgCreateTrustRegistry.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTrustRegistry", data);
    return promise.then((data) => MsgCreateTrustRegistryResponse.decode(_m0.Reader.create(data)));
  }

  AddGovernanceFrameworkDocument(
    request: MsgAddGovernanceFrameworkDocument,
  ): Promise<MsgAddGovernanceFrameworkDocumentResponse> {
    const data = MsgAddGovernanceFrameworkDocument.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddGovernanceFrameworkDocument", data);
    return promise.then((data) => MsgAddGovernanceFrameworkDocumentResponse.decode(_m0.Reader.create(data)));
  }

  IncreaseActiveGovernanceFrameworkVersion(
    request: MsgIncreaseActiveGovernanceFrameworkVersion,
  ): Promise<MsgIncreaseActiveGovernanceFrameworkVersionResponse> {
    const data = MsgIncreaseActiveGovernanceFrameworkVersion.encode(request).finish();
    const promise = this.rpc.request(this.service, "IncreaseActiveGovernanceFrameworkVersion", data);
    return promise.then((data) => MsgIncreaseActiveGovernanceFrameworkVersionResponse.decode(_m0.Reader.create(data)));
  }

  UpdateTrustRegistry(request: MsgUpdateTrustRegistry): Promise<MsgUpdateTrustRegistryResponse> {
    const data = MsgUpdateTrustRegistry.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateTrustRegistry", data);
    return promise.then((data) => MsgUpdateTrustRegistryResponse.decode(_m0.Reader.create(data)));
  }

  ArchiveTrustRegistry(request: MsgArchiveTrustRegistry): Promise<MsgArchiveTrustRegistryResponse> {
    const data = MsgArchiveTrustRegistry.encode(request).finish();
    const promise = this.rpc.request(this.service, "ArchiveTrustRegistry", data);
    return promise.then((data) => MsgArchiveTrustRegistryResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
