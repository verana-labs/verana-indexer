// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/tr/v1/genesis.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { GovernanceFrameworkDocument, GovernanceFrameworkVersion, TrustRegistry } from "./types";

export const protobufPackage = "verana.tr.v1";

/** Counter defines an entity type and its current counter value */
export interface Counter {
  entityType: string;
  value: Long;
}

/** GenesisState defines the trustregistry module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params?:
    | Params
    | undefined;
  /** Collection of all trust registries */
  trustRegistries: TrustRegistry[];
  /** Collection of all governance framework versions */
  governanceFrameworkVersions: GovernanceFrameworkVersion[];
  /** Collection of all governance framework documents */
  governanceFrameworkDocuments: GovernanceFrameworkDocument[];
  /** List of counters by entity type (tr, gfv, gfd) */
  counters: Counter[];
}

function createBaseCounter(): Counter {
  return { entityType: "", value: Long.UZERO };
}

export const Counter = {
  encode(message: Counter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityType !== "") {
      writer.uint32(10).string(message.entityType);
    }
    if (!message.value.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Counter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Counter {
    return {
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.UZERO,
    };
  },

  toJSON(message: Counter): unknown {
    const obj: any = {};
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (!message.value.equals(Long.UZERO)) {
      obj.value = (message.value || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Counter>, I>>(base?: I): Counter {
    return Counter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Counter>, I>>(object: I): Counter {
    const message = createBaseCounter();
    message.entityType = object.entityType ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.UZERO;
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    trustRegistries: [],
    governanceFrameworkVersions: [],
    governanceFrameworkDocuments: [],
    counters: [],
  };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.trustRegistries) {
      TrustRegistry.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.governanceFrameworkVersions) {
      GovernanceFrameworkVersion.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.governanceFrameworkDocuments) {
      GovernanceFrameworkDocument.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.counters) {
      Counter.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trustRegistries.push(TrustRegistry.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.governanceFrameworkVersions.push(GovernanceFrameworkVersion.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.governanceFrameworkDocuments.push(GovernanceFrameworkDocument.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.counters.push(Counter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      trustRegistries: globalThis.Array.isArray(object?.trustRegistries)
        ? object.trustRegistries.map((e: any) => TrustRegistry.fromJSON(e))
        : [],
      governanceFrameworkVersions: globalThis.Array.isArray(object?.governanceFrameworkVersions)
        ? object.governanceFrameworkVersions.map((e: any) => GovernanceFrameworkVersion.fromJSON(e))
        : [],
      governanceFrameworkDocuments: globalThis.Array.isArray(object?.governanceFrameworkDocuments)
        ? object.governanceFrameworkDocuments.map((e: any) => GovernanceFrameworkDocument.fromJSON(e))
        : [],
      counters: globalThis.Array.isArray(object?.counters) ? object.counters.map((e: any) => Counter.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.trustRegistries?.length) {
      obj.trustRegistries = message.trustRegistries.map((e) => TrustRegistry.toJSON(e));
    }
    if (message.governanceFrameworkVersions?.length) {
      obj.governanceFrameworkVersions = message.governanceFrameworkVersions.map((e) =>
        GovernanceFrameworkVersion.toJSON(e)
      );
    }
    if (message.governanceFrameworkDocuments?.length) {
      obj.governanceFrameworkDocuments = message.governanceFrameworkDocuments.map((e) =>
        GovernanceFrameworkDocument.toJSON(e)
      );
    }
    if (message.counters?.length) {
      obj.counters = message.counters.map((e) => Counter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.trustRegistries = object.trustRegistries?.map((e) => TrustRegistry.fromPartial(e)) || [];
    message.governanceFrameworkVersions =
      object.governanceFrameworkVersions?.map((e) => GovernanceFrameworkVersion.fromPartial(e)) || [];
    message.governanceFrameworkDocuments =
      object.governanceFrameworkDocuments?.map((e) => GovernanceFrameworkDocument.fromPartial(e)) || [];
    message.counters = object.counters?.map((e) => Counter.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
