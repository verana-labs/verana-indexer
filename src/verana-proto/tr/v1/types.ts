// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: verana/tr/v1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../timestamp";

export const protobufPackage = "verana.tr.v1";

export interface TrustRegistry {
  /** Added id field */
  id: Long;
  did: string;
  controller: string;
  created?: Date | undefined;
  modified?: Date | undefined;
  archived?: Date | undefined;
  deposit: Long;
  aka: string;
  activeVersion: number;
  language: string;
}

export interface GovernanceFrameworkVersion {
  /** Changed from string to uint64 */
  id: Long;
  /** Changed from tr_did to tr_id */
  trId: Long;
  created?: Date | undefined;
  version: number;
  activeSince?: Date | undefined;
}

export interface GovernanceFrameworkDocument {
  /** Changed from string to uint64 */
  id: Long;
  /** Changed from string to uint64 */
  gfvId: Long;
  created?: Date | undefined;
  language: string;
  url: string;
  digestSri: string;
}

/** GovernanceFrameworkVersionWithDocs extends GovernanceFrameworkVersion to include its documents */
export interface GovernanceFrameworkVersionWithDocs {
  id: Long;
  trId: Long;
  created?: Date | undefined;
  version: number;
  activeSince?: Date | undefined;
  documents: GovernanceFrameworkDocument[];
}

/** TrustRegistryWithVersions extends TrustRegistry to include its versions with nested documents */
export interface TrustRegistryWithVersions {
  id: Long;
  did: string;
  controller: string;
  created?: Date | undefined;
  modified?: Date | undefined;
  archived?: Date | undefined;
  deposit: Long;
  aka: string;
  activeVersion: number;
  language: string;
  versions: GovernanceFrameworkVersionWithDocs[];
}

function createBaseTrustRegistry(): TrustRegistry {
  return {
    id: Long.UZERO,
    did: "",
    controller: "",
    created: undefined,
    modified: undefined,
    archived: undefined,
    deposit: Long.ZERO,
    aka: "",
    activeVersion: 0,
    language: "",
  };
}

export const TrustRegistry = {
  encode(message: TrustRegistry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.controller !== "") {
      writer.uint32(26).string(message.controller);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(34).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(42).fork()).ldelim();
    }
    if (message.archived !== undefined) {
      Timestamp.encode(toTimestamp(message.archived), writer.uint32(50).fork()).ldelim();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.deposit);
    }
    if (message.aka !== "") {
      writer.uint32(66).string(message.aka);
    }
    if (message.activeVersion !== 0) {
      writer.uint32(72).int32(message.activeVersion);
    }
    if (message.language !== "") {
      writer.uint32(82).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrustRegistry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrustRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.controller = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.archived = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.deposit = reader.int64() as Long;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.aka = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.activeVersion = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrustRegistry {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
      archived: isSet(object.archived) ? fromJsonTimestamp(object.archived) : undefined,
      deposit: isSet(object.deposit) ? Long.fromValue(object.deposit) : Long.ZERO,
      aka: isSet(object.aka) ? globalThis.String(object.aka) : "",
      activeVersion: isSet(object.activeVersion) ? globalThis.Number(object.activeVersion) : 0,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: TrustRegistry): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    if (message.archived !== undefined) {
      obj.archived = message.archived.toISOString();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      obj.deposit = (message.deposit || Long.ZERO).toString();
    }
    if (message.aka !== "") {
      obj.aka = message.aka;
    }
    if (message.activeVersion !== 0) {
      obj.activeVersion = Math.round(message.activeVersion);
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrustRegistry>, I>>(base?: I): TrustRegistry {
    return TrustRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrustRegistry>, I>>(object: I): TrustRegistry {
    const message = createBaseTrustRegistry();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.did = object.did ?? "";
    message.controller = object.controller ?? "";
    message.created = object.created ?? undefined;
    message.modified = object.modified ?? undefined;
    message.archived = object.archived ?? undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Long.fromValue(object.deposit)
      : Long.ZERO;
    message.aka = object.aka ?? "";
    message.activeVersion = object.activeVersion ?? 0;
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGovernanceFrameworkVersion(): GovernanceFrameworkVersion {
  return { id: Long.UZERO, trId: Long.UZERO, created: undefined, version: 0, activeSince: undefined };
}

export const GovernanceFrameworkVersion = {
  encode(message: GovernanceFrameworkVersion, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.trId);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(26).fork()).ldelim();
    }
    if (message.version !== 0) {
      writer.uint32(32).int32(message.version);
    }
    if (message.activeSince !== undefined) {
      Timestamp.encode(toTimestamp(message.activeSince), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GovernanceFrameworkVersion {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGovernanceFrameworkVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.version = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.activeSince = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GovernanceFrameworkVersion {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      activeSince: isSet(object.activeSince) ? fromJsonTimestamp(object.activeSince) : undefined,
    };
  },

  toJSON(message: GovernanceFrameworkVersion): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.activeSince !== undefined) {
      obj.activeSince = message.activeSince.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GovernanceFrameworkVersion>, I>>(base?: I): GovernanceFrameworkVersion {
    return GovernanceFrameworkVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GovernanceFrameworkVersion>, I>>(object: I): GovernanceFrameworkVersion {
    const message = createBaseGovernanceFrameworkVersion();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.created = object.created ?? undefined;
    message.version = object.version ?? 0;
    message.activeSince = object.activeSince ?? undefined;
    return message;
  },
};

function createBaseGovernanceFrameworkDocument(): GovernanceFrameworkDocument {
  return { id: Long.UZERO, gfvId: Long.UZERO, created: undefined, language: "", url: "", digestSri: "" };
}

export const GovernanceFrameworkDocument = {
  encode(message: GovernanceFrameworkDocument, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (!message.gfvId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.gfvId);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(26).fork()).ldelim();
    }
    if (message.language !== "") {
      writer.uint32(34).string(message.language);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    if (message.digestSri !== "") {
      writer.uint32(50).string(message.digestSri);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GovernanceFrameworkDocument {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGovernanceFrameworkDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gfvId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.language = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.digestSri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GovernanceFrameworkDocument {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      gfvId: isSet(object.gfvId) ? Long.fromValue(object.gfvId) : Long.UZERO,
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      digestSri: isSet(object.digestSri) ? globalThis.String(object.digestSri) : "",
    };
  },

  toJSON(message: GovernanceFrameworkDocument): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (!message.gfvId.equals(Long.UZERO)) {
      obj.gfvId = (message.gfvId || Long.UZERO).toString();
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.digestSri !== "") {
      obj.digestSri = message.digestSri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GovernanceFrameworkDocument>, I>>(base?: I): GovernanceFrameworkDocument {
    return GovernanceFrameworkDocument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GovernanceFrameworkDocument>, I>>(object: I): GovernanceFrameworkDocument {
    const message = createBaseGovernanceFrameworkDocument();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.gfvId = (object.gfvId !== undefined && object.gfvId !== null) ? Long.fromValue(object.gfvId) : Long.UZERO;
    message.created = object.created ?? undefined;
    message.language = object.language ?? "";
    message.url = object.url ?? "";
    message.digestSri = object.digestSri ?? "";
    return message;
  },
};

function createBaseGovernanceFrameworkVersionWithDocs(): GovernanceFrameworkVersionWithDocs {
  return { id: Long.UZERO, trId: Long.UZERO, created: undefined, version: 0, activeSince: undefined, documents: [] };
}

export const GovernanceFrameworkVersionWithDocs = {
  encode(message: GovernanceFrameworkVersionWithDocs, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (!message.trId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.trId);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(26).fork()).ldelim();
    }
    if (message.version !== 0) {
      writer.uint32(32).int32(message.version);
    }
    if (message.activeSince !== undefined) {
      Timestamp.encode(toTimestamp(message.activeSince), writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.documents) {
      GovernanceFrameworkDocument.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GovernanceFrameworkVersionWithDocs {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGovernanceFrameworkVersionWithDocs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.version = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.activeSince = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documents.push(GovernanceFrameworkDocument.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GovernanceFrameworkVersionWithDocs {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      trId: isSet(object.trId) ? Long.fromValue(object.trId) : Long.UZERO,
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      activeSince: isSet(object.activeSince) ? fromJsonTimestamp(object.activeSince) : undefined,
      documents: globalThis.Array.isArray(object?.documents)
        ? object.documents.map((e: any) => GovernanceFrameworkDocument.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GovernanceFrameworkVersionWithDocs): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (!message.trId.equals(Long.UZERO)) {
      obj.trId = (message.trId || Long.UZERO).toString();
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.activeSince !== undefined) {
      obj.activeSince = message.activeSince.toISOString();
    }
    if (message.documents?.length) {
      obj.documents = message.documents.map((e) => GovernanceFrameworkDocument.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GovernanceFrameworkVersionWithDocs>, I>>(
    base?: I,
  ): GovernanceFrameworkVersionWithDocs {
    return GovernanceFrameworkVersionWithDocs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GovernanceFrameworkVersionWithDocs>, I>>(
    object: I,
  ): GovernanceFrameworkVersionWithDocs {
    const message = createBaseGovernanceFrameworkVersionWithDocs();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.trId = (object.trId !== undefined && object.trId !== null) ? Long.fromValue(object.trId) : Long.UZERO;
    message.created = object.created ?? undefined;
    message.version = object.version ?? 0;
    message.activeSince = object.activeSince ?? undefined;
    message.documents = object.documents?.map((e) => GovernanceFrameworkDocument.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrustRegistryWithVersions(): TrustRegistryWithVersions {
  return {
    id: Long.UZERO,
    did: "",
    controller: "",
    created: undefined,
    modified: undefined,
    archived: undefined,
    deposit: Long.ZERO,
    aka: "",
    activeVersion: 0,
    language: "",
    versions: [],
  };
}

export const TrustRegistryWithVersions = {
  encode(message: TrustRegistryWithVersions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.controller !== "") {
      writer.uint32(26).string(message.controller);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(34).fork()).ldelim();
    }
    if (message.modified !== undefined) {
      Timestamp.encode(toTimestamp(message.modified), writer.uint32(42).fork()).ldelim();
    }
    if (message.archived !== undefined) {
      Timestamp.encode(toTimestamp(message.archived), writer.uint32(50).fork()).ldelim();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.deposit);
    }
    if (message.aka !== "") {
      writer.uint32(66).string(message.aka);
    }
    if (message.activeVersion !== 0) {
      writer.uint32(72).int32(message.activeVersion);
    }
    if (message.language !== "") {
      writer.uint32(82).string(message.language);
    }
    for (const v of message.versions) {
      GovernanceFrameworkVersionWithDocs.encode(v!, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrustRegistryWithVersions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrustRegistryWithVersions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.controller = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.modified = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.archived = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.deposit = reader.int64() as Long;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.aka = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.activeVersion = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.language = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.versions.push(GovernanceFrameworkVersionWithDocs.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrustRegistryWithVersions {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      modified: isSet(object.modified) ? fromJsonTimestamp(object.modified) : undefined,
      archived: isSet(object.archived) ? fromJsonTimestamp(object.archived) : undefined,
      deposit: isSet(object.deposit) ? Long.fromValue(object.deposit) : Long.ZERO,
      aka: isSet(object.aka) ? globalThis.String(object.aka) : "",
      activeVersion: isSet(object.activeVersion) ? globalThis.Number(object.activeVersion) : 0,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      versions: globalThis.Array.isArray(object?.versions)
        ? object.versions.map((e: any) => GovernanceFrameworkVersionWithDocs.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrustRegistryWithVersions): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.modified !== undefined) {
      obj.modified = message.modified.toISOString();
    }
    if (message.archived !== undefined) {
      obj.archived = message.archived.toISOString();
    }
    if (!message.deposit.equals(Long.ZERO)) {
      obj.deposit = (message.deposit || Long.ZERO).toString();
    }
    if (message.aka !== "") {
      obj.aka = message.aka;
    }
    if (message.activeVersion !== 0) {
      obj.activeVersion = Math.round(message.activeVersion);
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => GovernanceFrameworkVersionWithDocs.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrustRegistryWithVersions>, I>>(base?: I): TrustRegistryWithVersions {
    return TrustRegistryWithVersions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrustRegistryWithVersions>, I>>(object: I): TrustRegistryWithVersions {
    const message = createBaseTrustRegistryWithVersions();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.did = object.did ?? "";
    message.controller = object.controller ?? "";
    message.created = object.created ?? undefined;
    message.modified = object.modified ?? undefined;
    message.archived = object.archived ?? undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Long.fromValue(object.deposit)
      : Long.ZERO;
    message.aka = object.aka ?? "";
    message.activeVersion = object.activeVersion ?? 0;
    message.language = object.language ?? "";
    message.versions = object.versions?.map((e) => GovernanceFrameworkVersionWithDocs.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
