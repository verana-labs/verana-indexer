version: "2.4"

services:
  # PostgreSQL
  psql:
    build: ./docker/psql/
    container_name: psql_erascope
    env_file: docker.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DB_TEST: ${POSTGRES_DB_TEST}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Redis
  redis:
    image: redis:latest
    container_name: redis_erascope
    ports:
      - "6379:6379"
    networks:
      - dev_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Hasura
  graphql-engine:
    image: hasura/graphql-engine:v2.12.1
    container_name: hasura
    depends_on:
      psql:
        condition: service_healthy
    ports:
      - "8888:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@psql:5432/hasura
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@psql:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    networks:
      - dev_network

  # Node.js app
  verana-indexer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: verana_indexer
    env_file: docker.env
    depends_on:
      psql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      POSTGRES_HOST: psql
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TRANSPORTER: redis://redis:6379
      CACHER: redis://redis:6379

      # Application configuration
      NODE_ENV: development
      NAMESPACE:
      LOGGER: true
      LOGLEVEL: info
      SERVICEDIR: dist/src/services
      SERVICES: "**/*.service.js"
      STRATEGY: RoundRobin
    ports:
      - "3000:3000"
    networks:
      - dev_network

networks:
  dev_network:

volumes:
  pgdata:
